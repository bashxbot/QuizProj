{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack quiz application called \"QuizMaster Pro\" that allows users to take AI-generated quizzes on various topics. The application features user authentication, quiz generation using Google's Gemini AI, score tracking, and leaderboards. Built with React frontend and Express backend, it provides an engaging platform for knowledge testing and competition.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **React 18** with TypeScript for the UI layer\n- **Vite** as the build tool and dev server\n- **Wouter** for client-side routing instead of React Router\n- **TanStack Query** for server state management and caching\n- **shadcn/ui** component library built on Radix UI primitives\n- **Tailwind CSS** for styling with custom design tokens\n- **React Hook Form** with Zod validation for form handling\n\n## Backend Architecture\n- **Express.js** server with TypeScript\n- **Passport.js** with Local Strategy for session-based authentication\n- **Express Session** with PostgreSQL session store for persistent sessions\n- RESTful API endpoints for quiz operations, user management, and leaderboards\n- **Drizzle ORM** for database operations with type-safe schema definitions\n- Custom middleware for request logging and error handling\n\n## Database Design\n- **PostgreSQL** as the primary database using Neon serverless\n- **Drizzle ORM** for schema management and migrations\n- Three main tables:\n  - `users` - User accounts with authentication and statistics\n  - `quizzes` - Quiz definitions with questions stored as JSONB\n  - `quiz_attempts` - User quiz submissions and scoring history\n- Relational design with foreign key constraints\n\n## Authentication & Authorization\n- Session-based authentication using Passport.js Local Strategy\n- Password hashing with Node.js crypto (scrypt) and random salts\n- Protected routes requiring authentication middleware\n- Session storage in PostgreSQL for scalability\n- Trust proxy configuration for deployment environments\n\n## State Management\n- Server state managed by TanStack Query with automatic caching\n- Local component state using React hooks\n- Form state handled by React Hook Form with Zod schemas\n- Authentication state provided through React Context\n\n## AI Integration\n- **Google Gemini 2.5 Flash** for quiz generation\n- Structured prompts to generate consistent quiz formats\n- JSON schema validation for AI responses\n- Category-based quiz generation with configurable question counts\n\n# External Dependencies\n\n## AI Services\n- **Google Generative AI** (@google/genai) - Quiz content generation using Gemini models\n\n## Database & Storage\n- **Neon Database** (@neondatabase/serverless) - Serverless PostgreSQL hosting\n- **Drizzle ORM** (drizzle-orm) - Type-safe database operations and migrations\n- **connect-pg-simple** - PostgreSQL session store for Express sessions\n\n## Authentication\n- **Passport.js** (passport, passport-local) - Authentication middleware and strategies\n- **Express Session** (express-session) - Session management\n\n## Frontend Libraries\n- **Radix UI** - Comprehensive set of accessible UI primitives\n- **TanStack React Query** - Server state management and caching\n- **React Hook Form** - Form handling with validation\n- **Wouter** - Lightweight client-side routing\n- **Zod** - TypeScript-first schema validation\n\n## Development Tools\n- **Vite** - Fast build tool and development server\n- **TypeScript** - Type safety across the full stack\n- **Tailwind CSS** - Utility-first CSS framework\n- **ESBuild** - Fast JavaScript bundler for production builds","size_bytes":3611},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      const user = await storage.getUserByUsername(username);\n      if (!user || !(await comparePasswords(password, user.password))) {\n        return done(null, false);\n      } else {\n        return done(null, user);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    const user = await storage.getUser(id);\n    done(null, user);\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    const existingUser = await storage.getUserByUsername(req.body.username);\n    if (existingUser) {\n      return res.status(400).send(\"Username already exists\");\n    }\n\n    const user = await storage.createUser({\n      ...req.body,\n      password: await hashPassword(req.body.password),\n    });\n\n    req.login(user, (err) => {\n      if (err) return next(err);\n      res.status(201).json(user);\n    });\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n}\n","size_bytes":2700},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/gemini.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\nimport { type GeneratedQuiz, type QuizQuestion } from \"@shared/schema\";\n\nfunction getAIClient() {\n  return new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n}\n\nexport async function generateQuiz(field: string, questionCount: number = 20): Promise<GeneratedQuiz> {\n  const fieldDescriptions = {\n    \"web-development\": \"modern web development including HTML5, CSS3, JavaScript ES6+, React, Vue, Angular, Node.js, Express, databases, APIs, responsive design, security, performance optimization, and deployment\",\n    \"android-development\": \"Android app development including Java, Kotlin, Android SDK, Activities, Fragments, Intents, UI/UX design, data persistence, networking, testing, publishing, and performance optimization\",\n    \"reverse-engineering\": \"software reverse engineering including disassembly, decompilation, static/dynamic analysis, debugging, malware analysis, binary exploitation, code obfuscation, and security research\",\n    \"ethical-hacking\": \"ethical hacking and penetration testing including network security, web application security, system vulnerabilities, OWASP Top 10, Metasploit, Burp Suite, social engineering, and security frameworks\"\n  };\n\n  const fieldDescription = fieldDescriptions[field as keyof typeof fieldDescriptions] || field;\n\n  const prompt = `Generate an educational quiz with exactly ${questionCount} multiple choice questions about ${fieldDescription}. \n\n  Focus on practical, real-world scenarios and current industry standards. Questions should test:\n  - Fundamental concepts and terminology\n  - Best practices and methodologies  \n  - Problem-solving skills\n  - Security considerations\n  - Performance optimization\n  - Industry tools and frameworks\n\n  Each question should:\n  - Be challenging but fair for intermediate learners\n  - Have exactly 4 options (A, B, C, D)\n  - Have only one correct answer\n  - Include a detailed explanation for the correct answer\n  - Be unique and cover different aspects of the field\n  - Use realistic scenarios when possible\n\n  Format the response as JSON with this structure:\n  {\n    \"title\": \"Quiz title for ${field}\",\n    \"category\": \"${field}\",\n    \"questions\": [\n      {\n        \"id\": \"q1\",\n        \"question\": \"Question text with practical context\",\n        \"options\": [\"Option A\", \"Option B\", \"Option C\", \"Option D\"],\n        \"correctAnswer\": 0,\n        \"explanation\": \"Detailed explanation of why this answer is correct and why others are wrong\"\n      }\n    ],\n    \"timeLimit\": ${questionCount * 60}\n  }\n\n  Make the questions educational, practical, and aligned with current industry standards.`;\n\n  async function attemptQuizGeneration(): Promise<GeneratedQuiz> {\n    const ai = getAIClient();\n\n    try {\n      const response = await ai.models.generateContent({\n        model: \"gemini-2.5-flash\",\n        config: {\n          responseMimeType: \"application/json\",\n          responseSchema: {\n            type: \"object\",\n            properties: {\n              title: { type: \"string\" },\n              category: { type: \"string\" },\n              questions: {\n                type: \"array\",\n                items: {\n                  type: \"object\",\n                  properties: {\n                    id: { type: \"string\" },\n                    question: { type: \"string\" },\n                    options: {\n                      type: \"array\",\n                      items: { type: \"string\" },\n                      minItems: 4,\n                      maxItems: 4\n                    },\n                    correctAnswer: { type: \"number\" },\n                    explanation: { type: \"string\" }\n                  },\n                  required: [\"id\", \"question\", \"options\", \"correctAnswer\", \"explanation\"]\n                }\n              },\n              timeLimit: { type: \"number\" }\n            },\n            required: [\"title\", \"category\", \"questions\", \"timeLimit\"]\n          }\n        },\n        contents: prompt,\n      });\n\n      const rawJson = response.text;\n      if (!rawJson) {\n        throw new Error(\"Empty response from Gemini API\");\n      }\n\n      const quizData: GeneratedQuiz = JSON.parse(rawJson);\n\n      // Validate the response\n      if (!quizData.questions || quizData.questions.length !== questionCount) {\n        throw new Error(\"Invalid quiz format received from AI\");\n      }\n\n      // Add unique IDs if not provided\n      quizData.questions = quizData.questions.map((q, index) => ({\n        ...q,\n        id: q.id || `q_${index + 1}`,\n      }));\n\n      return quizData;\n    } catch (error: any) {\n      throw error;\n    }\n  }\n\n  try {\n    return await attemptQuizGeneration();\n  } catch (error) {\n    console.error(\"Error generating quiz with Gemini:\", error);\n    throw new Error(`Failed to generate quiz: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n  }\n}\n\nexport function calculateScore(questions: QuizQuestion[], userAnswers: number[]): { score: number; pointsEarned: number } {\n  if (questions.length !== userAnswers.length) {\n    throw new Error(\"Questions and answers length mismatch\");\n  }\n\n  const correctAnswers = userAnswers.filter((answer, index) => \n    answer === questions[index].correctAnswer\n  ).length;\n\n  const score = Math.round((correctAnswers / questions.length) * 100);\n  const pointsEarned = correctAnswers * 10 + (score >= 80 ? 50 : score >= 60 ? 20 : 0); // Bonus points for high scores\n\n  return { score, pointsEarned };\n}","size_bytes":5430},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { setupAuth } from \"./auth\";\nimport { storage } from \"./storage\";\nimport { generateQuiz, calculateScore } from \"./gemini\";\nimport { insertQuizSchema, insertQuizAttemptSchema, quizSubmissionSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication routes\n  setupAuth(app);\n\n  // Quiz generation endpoint\n  app.post(\"/api/quiz/generate\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const { field, questionCount = 20, isDailyQuiz = false } = req.body;\n      if (!field) {\n        return res.status(400).json({ error: \"Field is required\" });\n      }\n\n      const userIp = req.ip || req.connection.remoteAddress || \"\";\n\n      // Check if user already took daily quiz today for this field\n      if (isDailyQuiz) {\n        const canTakeDaily = await storage.canTakeDailyQuiz(req.user!.id, field, userIp);\n        if (!canTakeDaily) {\n          return res.status(400).json({ error: \"Daily quiz already completed for this field today\" });\n        }\n      }\n\n      const generatedQuiz = await generateQuiz(field, questionCount);\n      \n      // Save quiz to database\n      const quiz = await storage.createQuiz({\n        title: generatedQuiz.title,\n        category: generatedQuiz.category,\n        field: field,\n        questions: generatedQuiz.questions,\n        timeLimit: generatedQuiz.timeLimit,\n        isDailyQuiz,\n      });\n\n      res.json({\n        id: quiz.id,\n        title: quiz.title,\n        category: quiz.category,\n        field: quiz.field,\n        questions: quiz.questions,\n        timeLimit: quiz.timeLimit,\n        isDailyQuiz,\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Submit quiz attempt\n  app.post(\"/api/quiz/submit\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const submissionData = quizSubmissionSchema.parse(req.body);\n\n      // Get quiz to validate answers\n      const quiz = await storage.getQuizById(submissionData.quizId);\n      if (!quiz) {\n        return res.status(404).json({ error: \"Quiz not found\" });\n      }\n\n      // Calculate score\n      const { score, pointsEarned } = calculateScore(\n        quiz.questions as any,\n        submissionData.answers as number[]\n      );\n\n      const userIp = req.ip || req.connection.remoteAddress || \"\";\n\n      // Create quiz attempt\n      const attempt = await storage.createQuizAttempt({\n        userId: req.user!.id,\n        quizId: submissionData.quizId,\n        answers: submissionData.answers,\n        timeSpent: submissionData.timeSpent,\n        score,\n        pointsEarned,\n        field: quiz.field || quiz.category,\n        isDailyQuiz: quiz.isDailyQuiz || false,\n        ipAddress: userIp,\n      });\n\n      // Update user stats for all quiz attempts\n      await storage.updateUserStats(req.user!.id, pointsEarned, quiz.field || quiz.category);\n\n      res.json({\n        id: attempt.id,\n        score,\n        pointsEarned,\n        correctAnswers: quiz.questions as any,\n        userAnswers: submissionData.answers,\n        timeSpent: submissionData.timeSpent,\n        quizTitle: quiz.title,\n        totalQuestions: quiz.questions.length,\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get quiz by ID\n  app.get(\"/api/quiz/:id\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const quiz = await storage.getQuizById(req.params.id);\n      if (!quiz) {\n        return res.status(404).json({ error: \"Quiz not found\" });\n      }\n\n      res.json(quiz);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get leaderboard\n  app.get(\"/api/leaderboard\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const limit = parseInt(req.query.limit as string) || 50;\n      const leaderboard = await storage.getLeaderboard(limit);\n\n      res.json(leaderboard);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get user profile with stats\n  app.get(\"/api/profile\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const userWithStats = await storage.getUserWithStats(req.user!.id);\n      if (!userWithStats) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      res.json(userWithStats);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get user quiz history\n  app.get(\"/api/quiz-history\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const attempts = await storage.getUserQuizAttempts(req.user!.id);\n      res.json(attempts);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get daily quiz status\n  app.get(\"/api/daily-quiz-status\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const userIp = req.ip || req.connection.remoteAddress || \"\";\n      const status = await storage.getDailyQuizStatus(req.user!.id, userIp);\n      res.json(status);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Get field-based leaderboard\n  app.get(\"/api/leaderboard/:field\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ error: \"Authentication required\" });\n      }\n\n      const limit = parseInt(req.query.limit as string) || 50;\n      const leaderboard = await storage.getFieldLeaderboard(req.params.field, limit);\n      res.json(leaderboard);\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":6206},"server/storage.ts":{"content":"import { users, quizzes, quizAttempts, type User, type InsertUser, type Quiz, type InsertQuiz, type QuizAttempt, type InsertQuizAttempt, type UserWithStats, type LeaderboardEntry } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, sql } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { pool } from \"./db\";\n\nconst PostgresSessionStore = connectPg(session);\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  createQuiz(quiz: InsertQuiz): Promise<Quiz>;\n  getQuizzesByCategory(category: string): Promise<Quiz[]>;\n  getQuizById(id: string): Promise<Quiz | undefined>;\n  \n  createQuizAttempt(attempt: InsertQuizAttempt): Promise<QuizAttempt>;\n  getUserQuizAttempts(userId: string): Promise<QuizAttempt[]>;\n  updateUserStats(userId: string, pointsEarned: number, field: string): Promise<void>;\n  \n  getLeaderboard(limit?: number): Promise<LeaderboardEntry[]>;\n  canTakeDailyQuiz(userId: string, field: string, ipAddress: string): Promise<boolean>;\n  getDailyQuizStatus(userId: string, ipAddress: string): Promise<Record<string, boolean>>;\n  getFieldLeaderboard(field: string, limit?: number): Promise<LeaderboardEntry[]>;\n  getUserWithStats(userId: string): Promise<UserWithStats | undefined>;\n  \n  sessionStore: session.SessionStore;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: session.SessionStore;\n\n  constructor() {\n    this.sessionStore = new PostgresSessionStore({ \n      pool, \n      createTableIfMissing: true \n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async createQuiz(insertQuiz: InsertQuiz): Promise<Quiz> {\n    const [quiz] = await db\n      .insert(quizzes)\n      .values(insertQuiz)\n      .returning();\n    return quiz;\n  }\n\n  async getQuizzesByCategory(category: string): Promise<Quiz[]> {\n    return await db\n      .select()\n      .from(quizzes)\n      .where(eq(quizzes.category, category))\n      .orderBy(desc(quizzes.createdAt))\n      .limit(10);\n  }\n\n  async getQuizById(id: string): Promise<Quiz | undefined> {\n    const [quiz] = await db.select().from(quizzes).where(eq(quizzes.id, id));\n    return quiz || undefined;\n  }\n\n  async createQuizAttempt(insertAttempt: InsertQuizAttempt): Promise<QuizAttempt> {\n    const [attempt] = await db\n      .insert(quizAttempts)\n      .values(insertAttempt)\n      .returning();\n    return attempt;\n  }\n\n  async getUserQuizAttempts(userId: string): Promise<QuizAttempt[]> {\n    return await db\n      .select()\n      .from(quizAttempts)\n      .where(eq(quizAttempts.userId, userId))\n      .orderBy(desc(quizAttempts.completedAt))\n      .limit(20);\n  }\n\n  async getLeaderboard(limit: number = 50): Promise<LeaderboardEntry[]> {\n    const result = await db\n      .select({\n        id: users.id,\n        username: users.username,\n        totalScore: users.totalScore,\n        quizzesTaken: users.quizzesTaken,\n      })\n      .from(users)\n      .where(sql`${users.quizzesTaken} > 0`)\n      .orderBy(desc(users.totalScore))\n      .limit(limit);\n\n    return result.map((user, index) => ({\n      ...user,\n      averageScore: user.quizzesTaken > 0 ? Math.round((user.totalScore / user.quizzesTaken) * 100 / 100) : 0,\n      rank: index + 1,\n    }));\n  }\n\n  async getUserWithStats(userId: string): Promise<UserWithStats | undefined> {\n    const user = await this.getUser(userId);\n    if (!user) return undefined;\n\n    const leaderboard = await this.getLeaderboard();\n    const userRank = leaderboard.find(entry => entry.id === userId);\n\n    return {\n      ...user,\n      rank: userRank?.rank,\n      averageScore: user.quizzesTaken > 0 ? Math.round((user.totalScore / user.quizzesTaken) * 100 / 100) : 0,\n    };\n  }\n\n  async canTakeDailyQuiz(userId: string, field: string, ipAddress: string): Promise<boolean> {\n    const today = new Date().toISOString().split('T')[0];\n    \n    // Check by user ID and IP\n    const existingAttempt = await db\n      .select()\n      .from(quizAttempts)\n      .where(\n        sql`${quizAttempts.userId} = ${userId} \n        AND ${quizAttempts.field} = ${field}\n        AND ${quizAttempts.isDailyQuiz} = true\n        AND DATE(${quizAttempts.completedAt}) = ${today}`\n      )\n      .limit(1);\n\n    const ipAttempt = await db\n      .select()\n      .from(quizAttempts)\n      .where(\n        sql`${quizAttempts.ipAddress} = ${ipAddress}\n        AND ${quizAttempts.field} = ${field}\n        AND ${quizAttempts.isDailyQuiz} = true\n        AND DATE(${quizAttempts.completedAt}) = ${today}`\n      )\n      .limit(1);\n\n    return existingAttempt.length === 0 && ipAttempt.length === 0;\n  }\n\n  async getDailyQuizStatus(userId: string, ipAddress: string): Promise<Record<string, boolean>> {\n    const today = new Date().toISOString().split('T')[0];\n    const fields = [\"web-development\", \"android-development\", \"reverse-engineering\", \"ethical-hacking\"];\n    \n    const status: Record<string, boolean> = {};\n    \n    for (const field of fields) {\n      const canTake = await this.canTakeDailyQuiz(userId, field, ipAddress);\n      status[field] = !canTake; // true if already taken\n    }\n    \n    return status;\n  }\n\n  async updateUserStats(userId: string, pointsEarned: number, field: string): Promise<void> {\n    await db\n      .update(users)\n      .set({\n        totalScore: sql`${users.totalScore} + ${pointsEarned}`,\n        quizzesTaken: sql`${users.quizzesTaken} + 1`,\n      })\n      .where(eq(users.id, userId));\n  }\n\n  async getFieldLeaderboard(field: string, limit: number = 50): Promise<LeaderboardEntry[]> {\n    const result = await db\n      .select({\n        id: users.id,\n        username: users.username,\n        totalScore: sql<number>`COALESCE(SUM(${quizAttempts.pointsEarned}), 0)`.as('fieldScore'),\n        quizzesTaken: sql<number>`COUNT(${quizAttempts.id})`.as('fieldQuizzes'),\n      })\n      .from(users)\n      .leftJoin(quizAttempts, \n        sql`${users.id} = ${quizAttempts.userId} \n        AND ${quizAttempts.field} = ${field} \n        AND ${quizAttempts.isDailyQuiz} = true`\n      )\n      .groupBy(users.id, users.username)\n      .having(sql`COUNT(${quizAttempts.id}) > 0`)\n      .orderBy(sql`fieldScore DESC`)\n      .limit(limit);\n\n    return result.map((user, index) => ({\n      ...user,\n      totalScore: user.totalScore,\n      quizzesTaken: user.quizzesTaken,\n      averageScore: user.quizzesTaken > 0 ? Math.round((user.totalScore / user.quizzesTaken)) : 0,\n      rank: index + 1,\n    }));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":7093},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, jsonb, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  totalScore: integer(\"total_score\").notNull().default(0),\n  quizzesTaken: integer(\"quizzes_taken\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const quizzes = pgTable(\"quizzes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  category: text(\"category\").notNull(),\n  field: text(\"field\").notNull(), // web-dev, android-dev, reverse-eng, ethical-hacking, etc.\n  questions: jsonb(\"questions\").notNull(), // Array of question objects\n  difficulty: text(\"difficulty\").notNull().default(\"medium\"),\n  timeLimit: integer(\"time_limit\").notNull().default(1200), // 20 minutes for 20 questions\n  isDailyQuiz: boolean(\"is_daily_quiz\").notNull().default(false),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const quizAttempts = pgTable(\"quiz_attempts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  quizId: varchar(\"quiz_id\").notNull().references(() => quizzes.id),\n  score: integer(\"score\").notNull(), // percentage score\n  pointsEarned: integer(\"points_earned\").notNull(),\n  timeSpent: integer(\"time_spent\").notNull(), // in seconds\n  answers: jsonb(\"answers\").notNull(), // Array of user answers\n  field: text(\"field\").notNull(),\n  isDailyQuiz: boolean(\"is_daily_quiz\").notNull().default(false),\n  ipAddress: text(\"ip_address\"),\n  completedAt: timestamp(\"completed_at\").notNull().defaultNow(),\n});\n\nexport const usersRelations = relations(users, ({ many }) => ({\n  quizAttempts: many(quizAttempts),\n}));\n\nexport const quizzesRelations = relations(quizzes, ({ many }) => ({\n  attempts: many(quizAttempts),\n}));\n\nexport const quizAttemptsRelations = relations(quizAttempts, ({ one }) => ({\n  user: one(users, {\n    fields: [quizAttempts.userId],\n    references: [users.id],\n  }),\n  quiz: one(quizzes, {\n    fields: [quizAttempts.quizId],\n    references: [quizzes.id],\n  }),\n}));\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertQuizSchema = createInsertSchema(quizzes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertQuizAttemptSchema = createInsertSchema(quizAttempts).omit({\n  id: true,\n  completedAt: true,\n});\n\n// Schema for quiz submission from frontend (without calculated fields)\nexport const quizSubmissionSchema = createInsertSchema(quizAttempts).pick({\n  quizId: true,\n  answers: true,\n  timeSpent: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertQuiz = z.infer<typeof insertQuizSchema>;\nexport type Quiz = typeof quizzes.$inferSelect;\nexport type InsertQuizAttempt = z.infer<typeof insertQuizAttemptSchema>;\nexport type QuizAttempt = typeof quizAttempts.$inferSelect;\n\n// Additional types for API responses\nexport type UserWithStats = User & {\n  rank?: number;\n  averageScore?: number;\n};\n\nexport type LeaderboardEntry = {\n  id: string;\n  username: string;\n  totalScore: number;\n  quizzesTaken: number;\n  averageScore: number;\n  rank: number;\n};\n\nexport type QuizQuestion = {\n  id: string;\n  question: string;\n  options: string[];\n  correctAnswer: number;\n  explanation?: string;\n};\n\nexport type GeneratedQuiz = {\n  title: string;\n  category: string;\n  questions: QuizQuestion[];\n  timeLimit: number;\n};\n","size_bytes":3910},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { QuizProvider } from \"@/hooks/use-quiz-state\"; // Import QuizProvider\nimport { ProtectedRoute } from \"./lib/protected-route\";\nimport HomePage from \"@/pages/home-page\";\nimport AuthPage from \"@/pages/auth-page\";\nimport NotFound from \"@/pages/not-found\"; // Assuming NotFoundPage is actually NotFound\n\nfunction Router() {\n  return (\n    <QuizProvider>\n      <Switch>\n        <Route path=\"/auth\" component={AuthPage} />\n        <ProtectedRoute path=\"/\" component={HomePage} />\n        <Route component={NotFound} />\n      </Switch>\n    </QuizProvider>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":1141},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 262.1 83.3% 57.8%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 310 100% 70%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 262.1 83.3% 57.8%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n    --radius: 0.75rem;\n  }\n\n  [data-theme=\"light\"] {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n    --primary: 262.1 83.3% 57.8%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 210 40% 96%;\n    --secondary-foreground: 222.2 84% 4.9%;\n    --muted: 210 40% 96%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n    --accent: 310 100% 70%;\n    --accent-foreground: 222.2 84% 4.9%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 262.1 83.3% 57.8%;\n  }\n\n  [data-theme=\"dark\"] {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 262.1 83.3% 57.8%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 310 100% 70%;\n    --accent-foreground: 210 40% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 262.1 83.3% 57.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n    background: linear-gradient(135deg, hsl(var(--background)) 0%, hsl(var(--background)/.8) 50%, hsl(var(--primary)/.05) 100%);\n    min-height: 100vh;\n  }\n}\n\n@layer components {\n  /* Glassmorphism Effects */\n  .glass-morphism {\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n  }\n\n  .glass-effect {\n    background: rgba(255, 255, 255, 0.03);\n    backdrop-filter: blur(15px);\n    border: 1px solid rgba(255, 255, 255, 0.08);\n    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.05);\n  }\n\n  /* Gradient Text */\n  .gradient-text {\n    background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--accent)));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  /* Neon Glow Effects */\n  .neon-glow {\n    box-shadow: \n      0 0 5px hsl(var(--primary)/.3),\n      0 0 10px hsl(var(--primary)/.3),\n      0 0 15px hsl(var(--primary)/.3),\n      0 0 20px hsl(var(--primary)/.2);\n  }\n\n  .neon-glow-accent {\n    box-shadow: \n      0 0 5px hsl(var(--accent)/.3),\n      0 0 10px hsl(var(--accent)/.3),\n      0 0 15px hsl(var(--accent)/.3),\n      0 0 20px hsl(var(--accent)/.2);\n  }\n\n  /* Floating Animation */\n  .float {\n    animation: float 3s ease-in-out infinite;\n  }\n\n  @keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n  }\n\n  /* Sparkle Animation */\n  .animate-sparkle {\n    animation: sparkle 2s linear infinite;\n  }\n\n  @keyframes sparkle {\n    0%, 100% { opacity: 1; transform: scale(1) rotate(0deg); }\n    50% { opacity: 0.5; transform: scale(1.2) rotate(180deg); }\n  }\n\n  /* Pulse Glow */\n  .pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite alternate;\n  }\n\n  @keyframes pulse-glow {\n    from {\n      box-shadow: 0 0 20px hsl(var(--primary)/.2);\n    }\n    to {\n      box-shadow: 0 0 30px hsl(var(--primary)/.4), 0 0 40px hsl(var(--primary)/.1);\n    }\n  }\n\n  /* Card Hover Effects */\n  .card-hover {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .card-hover:hover {\n    transform: translateY(-8px);\n    box-shadow: \n      0 20px 40px rgba(0, 0, 0, 0.1),\n      0 0 20px hsl(var(--primary)/.1);\n  }\n\n  /* Modern Button Styles */\n  .btn-modern {\n    position: relative;\n    overflow: hidden;\n    background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--accent)));\n    border: none;\n    border-radius: 12px;\n    padding: 12px 24px;\n    color: white;\n    font-weight: 600;\n    transition: all 0.3s ease;\n  }\n\n  .btn-modern::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);\n    transition: left 0.5s;\n  }\n\n  .btn-modern:hover::before {\n    left: 100%;\n  }\n\n  .btn-modern:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 10px 25px rgba(0,0,0,0.2);\n  }\n\n  /* Scrollbar Styling */\n  ::-webkit-scrollbar {\n    width: 8px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: rgba(255, 255, 255, 0.05);\n    border-radius: 10px;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--accent)));\n    border-radius: 10px;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: linear-gradient(135deg, hsl(var(--primary)/.8), hsl(var(--accent)/.8));\n  }\n\n  /* Selection Styling */\n  ::selection {\n    background: hsl(var(--primary)/.3);\n    color: hsl(var(--foreground));\n  }\n\n  /* Focus Styles */\n  .focus-glow:focus {\n    outline: none;\n    box-shadow: 0 0 0 3px hsl(var(--primary)/.3);\n  }\n\n  /* Loading Spinner */\n  .spinner {\n    animation: spin 1s linear infinite;\n  }\n\n  @keyframes spin {\n    from { transform: rotate(0deg); }\n    to { transform: rotate(360deg); }\n  }\n\n  /* Shimmer Effect */\n  .shimmer {\n    background: linear-gradient(90deg, \n      rgba(255,255,255,0.1) 0%, \n      rgba(255,255,255,0.3) 50%, \n      rgba(255,255,255,0.1) 100%);\n    background-size: 200% 100%;\n    animation: shimmer 2s infinite;\n  }\n\n  @keyframes shimmer {\n    0% { background-position: -200% 0; }\n    100% { background-position: 200% 0; }\n  }\n\n  /* Gradient Borders */\n  .gradient-border {\n    position: relative;\n    background: hsl(var(--background));\n    border-radius: 12px;\n  }\n\n  .gradient-border::before {\n    content: '';\n    position: absolute;\n    inset: 0;\n    padding: 2px;\n    background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--accent)));\n    border-radius: inherit;\n    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n    mask-composite: exclude;\n    -webkit-mask-composite: xor;\n  }\n\n  /* Modern Input Styles */\n  .input-modern {\n    background: rgba(255, 255, 255, 0.05);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    border-radius: 12px;\n    padding: 12px 16px;\n    transition: all 0.3s ease;\n    backdrop-filter: blur(10px);\n  }\n\n  .input-modern:focus {\n    border-color: hsl(var(--primary));\n    box-shadow: 0 0 0 3px hsl(var(--primary)/.2);\n    background: rgba(255, 255, 255, 0.08);\n  }\n\n  /* Animated Background */\n  .animated-bg {\n    background: linear-gradient(-45deg, \n      hsl(var(--background)), \n      hsl(var(--primary)/.1), \n      hsl(var(--accent)/.1), \n      hsl(var(--background)));\n    background-size: 400% 400%;\n    animation: gradient 15s ease infinite;\n  }\n\n  @keyframes gradient {\n    0% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n    100% { background-position: 0% 50%; }\n  }\n}\n\n/* Modern quiz platform styles */\n.quiz-option {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  background: linear-gradient(135deg, hsl(var(--card)) 0%, hsl(var(--muted) / 0.3) 100%);\n  border: 1px solid hsl(var(--border));\n  backdrop-filter: blur(8px);\n}\n\n.quiz-option:hover {\n  transform: translateY(-2px) scale(1.02);\n  box-shadow: 0 8px 25px -8px hsl(var(--primary) / 0.3);\n  border-color: hsl(var(--primary) / 0.5);\n}\n\n.quiz-option.selected {\n  background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--primary) / 0.8) 100%);\n  color: hsl(var(--primary-foreground));\n  border-color: hsl(var(--primary));\n  box-shadow: 0 8px 25px -8px hsl(var(--primary) / 0.5);\n}\n\n.quiz-option.correct {\n  background: linear-gradient(135deg, hsl(142, 76%, 36%) 0%, hsl(142, 76%, 46%) 100%);\n  color: white;\n  border-color: hsl(142, 76%, 36%);\n  box-shadow: 0 8px 25px -8px hsl(142, 76%, 36% / 0.5);\n}\n\n.quiz-option.incorrect {\n  background: linear-gradient(135deg, hsl(var(--destructive)) 0%, hsl(var(--destructive) / 0.8) 100%);\n  color: hsl(var(--destructive-foreground));\n  border-color: hsl(var(--destructive));\n  box-shadow: 0 8px 25px -8px hsl(var(--destructive) / 0.5);\n}\n\n.progress-bar {\n  transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);\n  background: linear-gradient(90deg, hsl(var(--primary)) 0%, hsl(var(--accent)) 100%);\n}\n\n.leaderboard-rank {\n  background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--accent)) 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  font-weight: 900;\n}\n\n.profile-stat {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  background: linear-gradient(135deg, hsl(var(--card)) 0%, hsl(var(--muted) / 0.5) 100%);\n  border: 1px solid hsl(var(--border));\n  backdrop-filter: blur(8px);\n}\n\n.profile-stat:hover {\n  transform: translateY(-4px) scale(1.05);\n  box-shadow: 0 12px 25px -8px hsl(var(--primary) / 0.15);\n  border-color: hsl(var(--primary) / 0.3);\n}\n\n.modern-card {\n  background: linear-gradient(135deg, hsl(var(--card)) 0%, hsl(var(--muted) / 0.2) 100%);\n  border: 1px solid hsl(var(--border));\n  backdrop-filter: blur(8px);\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.modern-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 12px 25px -8px hsl(var(--primary) / 0.15);\n  border-color: hsl(var(--primary) / 0.3);\n}\n\n.glass-effect {\n  background: linear-gradient(135deg, hsl(var(--background) / 0.8) 0%, hsl(var(--card) / 0.4) 100%);\n  backdrop-filter: blur(12px);\n  border: 1px solid hsl(var(--border) / 0.5);\n}\n\n@keyframes shimmer {\n  0% { background-position: -468px 0; }\n  100% { background-position: 468px 0; }\n}\n\n@keyframes pulse-glow {\n  0%, 100% { box-shadow: 0 0 5px hsl(var(--primary) / 0.3); }\n  50% { box-shadow: 0 0 20px hsl(var(--primary) / 0.6), 0 0 30px hsl(var(--primary) / 0.4); }\n}\n\n.pulse-glow {\n  animation: pulse-glow 2s infinite;\n}\n\n/* Enhanced Custom Scrollbar */\n.scrollbar-thin {\n  scrollbar-width: thin;\n}\n\n.scrollbar-thumb-primary\\/20::-webkit-scrollbar-thumb {\n  background: linear-gradient(135deg, hsl(var(--primary) / 0.3), hsl(var(--accent) / 0.3));\n  border-radius: 8px;\n  border: 2px solid transparent;\n  background-clip: content-box;\n}\n\n.scrollbar-track-transparent::-webkit-scrollbar-track {\n  background: linear-gradient(135deg, hsl(var(--background)), hsl(var(--card)));\n  border-radius: 8px;\n}\n\n.scrollbar-thin::-webkit-scrollbar {\n  width: 12px;\n}\n\n.scrollbar-thin::-webkit-scrollbar-thumb {\n  background: linear-gradient(135deg, hsl(var(--primary) / 0.4), hsl(var(--accent) / 0.4));\n  border-radius: 8px;\n  border: 2px solid transparent;\n  background-clip: content-box;\n  transition: all 0.3s ease;\n}\n\n.scrollbar-thin::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(135deg, hsl(var(--primary) / 0.6), hsl(var(--accent) / 0.6));\n  transform: scale(1.1);\n}\n\n.scrollbar-thin::-webkit-scrollbar-track {\n  background: linear-gradient(135deg, hsl(var(--background) / 0.5), hsl(var(--card) / 0.5));\n  border-radius: 8px;\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px) rotate(0deg); }\n  33% { transform: translateY(-8px) rotate(1deg); }\n  66% { transform: translateY(-15px) rotate(-1deg); }\n}\n\n@keyframes glow-pulse {\n  0%, 100% { \n    box-shadow: 0 0 20px hsl(var(--primary) / 0.4), 0 0 40px hsl(var(--primary) / 0.2), 0 0 60px hsl(var(--primary) / 0.1);\n  }\n  50% { \n    box-shadow: 0 0 30px hsl(var(--primary) / 0.6), 0 0 60px hsl(var(--primary) / 0.4), 0 0 90px hsl(var(--primary) / 0.2);\n  }\n}\n\n@keyframes rainbow-border {\n  0% { border-color: hsl(var(--primary)); }\n  16% { border-color: hsl(var(--accent)); }\n  33% { border-color: hsl(142, 76%, 36%); }\n  50% { border-color: hsl(46, 100%, 50%); }\n  66% { border-color: hsl(24, 95%, 53%); }\n  83% { border-color: hsl(348, 83%, 47%); }\n  100% { border-color: hsl(var(--primary)); }\n}\n\n@keyframes slide-in {\n  from {\n    opacity: 0;\n    transform: translateY(30px) scale(0.95);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0) scale(1);\n  }\n}\n\n@keyframes bounce-in {\n  0% {\n    opacity: 0;\n    transform: scale(0.3) translateY(-100px);\n  }\n  50% {\n    opacity: 1;\n    transform: scale(1.1) translateY(0);\n  }\n  70% {\n    transform: scale(0.9);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n@keyframes sparkle {\n  0%, 100% { opacity: 0; transform: scale(0) rotate(0deg); }\n  50% { opacity: 1; transform: scale(1) rotate(180deg); }\n}\n\n@keyframes progress-fill {\n  0% { width: 0%; }\n  100% { width: var(--progress-width); }\n}\n\n.loading-shimmer {\n  background: linear-gradient(90deg, \n    hsl(var(--muted)) 25%, \n    hsl(var(--primary) / 0.1) 50%, \n    hsl(var(--muted)) 75%);\n  background-size: 400% 100%;\n  animation: shimmer 1.5s ease-in-out infinite;\n}\n\n.pulse-glow {\n  animation: glow-pulse 2s ease-in-out infinite;\n}\n\n.rainbow-border {\n  animation: rainbow-border 3s linear infinite;\n}\n\n.slide-in {\n  animation: slide-in 0.6s cubic-bezier(0.16, 1, 0.3, 1) forwards;\n}\n\n.bounce-in {\n  animation: bounce-in 0.8s cubic-bezier(0.16, 1, 0.3, 1) forwards;\n}\n\n.float {\n  animation: float 4s ease-in-out infinite;\n}\n\n.sparkle {\n  animation: sparkle 1.5s ease-in-out infinite;\n}\n\n.gradient-text {\n  background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--accent)) 50%, hsl(var(--primary)) 100%);\n  background-size: 200% 200%;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  animation: gradient-shift 3s ease infinite;\n}\n\n.animate-gradient-x {\n  background-size: 200% 200%;\n  animation: gradient-x 3s ease infinite;\n}\n\n.neon-glow-hover:hover {\n  animation: neon-pulse 2s ease-in-out infinite;\n}\n\n.glass-shimmer::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(\n    90deg,\n    transparent 0%,\n    hsl(var(--primary) / 0.1) 50%,\n    transparent 100%\n  );\n  background-size: 200% 100%;\n  animation: glass-shimmer 3s ease-in-out infinite;\n  border-radius: inherit;\n}\n\n.morphism-float {\n  animation: morphism-float 6s ease-in-out infinite;\n}\n\n.enhanced-glow {\n  box-shadow: \n    0 0 20px hsl(var(--primary) / 0.3),\n    0 0 40px hsl(var(--primary) / 0.2),\n    0 0 60px hsl(var(--primary) / 0.1),\n    inset 0 1px 0 hsl(var(--background) / 0.1);\n}\n\n.enhanced-glow:hover {\n  box-shadow: \n    0 0 30px hsl(var(--primary) / 0.5),\n    0 0 60px hsl(var(--primary) / 0.3),\n    0 0 90px hsl(var(--primary) / 0.2),\n    inset 0 1px 0 hsl(var(--background) / 0.2);\n}\n\n@keyframes gradient-shift {\n  0%, 100% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n}\n\n@keyframes gradient-x {\n  0%, 100% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n}\n\n@keyframes neon-pulse {\n  0%, 100% { \n    box-shadow: \n      0 0 5px hsl(var(--primary) / 0.5),\n      0 0 10px hsl(var(--primary) / 0.4),\n      0 0 15px hsl(var(--primary) / 0.3),\n      0 0 20px hsl(var(--primary) / 0.2);\n  }\n  50% { \n    box-shadow: \n      0 0 10px hsl(var(--primary) / 0.8),\n      0 0 20px hsl(var(--primary) / 0.6),\n      0 0 30px hsl(var(--primary) / 0.4),\n      0 0 40px hsl(var(--primary) / 0.2);\n  }\n}\n\n@keyframes glass-shimmer {\n  0% { \n    background-position: -200% center;\n    opacity: 0;\n  }\n  50% {\n    opacity: 1;\n  }\n  100% { \n    background-position: 200% center;\n    opacity: 0;\n  }\n}\n\n@keyframes morphism-float {\n  0%, 100% { \n    transform: translateY(0px) scale(1) rotate(0deg);\n    filter: hue-rotate(0deg);\n  }\n  33% { \n    transform: translateY(-10px) scale(1.02) rotate(1deg);\n    filter: hue-rotate(30deg);\n  }\n  66% { \n    transform: translateY(-5px) scale(0.98) rotate(-1deg);\n    filter: hue-rotate(-30deg);\n  }\n}\n\n/* Modern Interactive Elements */\n.interactive-card {\n  transition: all 0.4s cubic-bezier(0.16, 1, 0.3, 1);\n  background: linear-gradient(135deg, hsl(var(--card)) 0%, hsl(var(--muted) / 0.3) 100%);\n}\n\n.interactive-card:hover {\n  transform: translateY(-8px) scale(1.02);\n  box-shadow: \n    0 20px 40px -12px hsl(var(--primary) / 0.25),\n    0 0 0 1px hsl(var(--primary) / 0.05),\n    inset 0 1px 0 hsl(var(--background) / 0.1);\n}\n\n.glass-morphism {\n  background: linear-gradient(135deg, \n    hsl(var(--background) / 0.8) 0%, \n    hsl(var(--card) / 0.4) 50%,\n    hsl(var(--background) / 0.6) 100%);\n  backdrop-filter: blur(20px) saturate(1.8) brightness(1.1);\n  border: 1px solid hsl(var(--border) / 0.4);\n  box-shadow: \n    0 8px 32px 0 hsl(var(--primary) / 0.1),\n    0 2px 8px 0 hsl(var(--background) / 0.4),\n    inset 0 1px 0 0 hsl(var(--background) / 0.1),\n    inset 0 -1px 0 0 hsl(var(--border) / 0.1);\n}\n\n.glass-effect {\n  background: linear-gradient(135deg, \n    hsl(var(--background) / 0.6) 0%, \n    hsl(var(--card) / 0.2) 100%);\n  backdrop-filter: blur(12px) saturate(1.5);\n  border: 1px solid hsl(var(--border) / 0.3);\n  box-shadow: \n    0 4px 16px 0 hsl(var(--primary) / 0.05),\n    inset 0 1px 0 0 hsl(var(--background) / 0.05);\n}\n\n.neon-glow {\n  position: relative;\n  overflow: hidden;\n}\n\n.neon-glow::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, \n    transparent, \n    hsl(var(--primary) / 0.4), \n    transparent);\n  transition: left 0.8s;\n}\n\n.neon-glow:hover::before {\n  left: 100%;\n}\n\n/* Enhanced button styles */\n.btn-primary {\n  background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--accent)) 100%);\n  border: none;\n  color: white;\n  font-weight: 600;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n  position: relative;\n  overflow: hidden;\n}\n\n.btn-primary:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 10px 30px -5px hsl(var(--primary) / 0.4);\n}\n\n.btn-primary::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, \n    transparent, \n    hsl(var(--background) / 0.2), \n    transparent);\n  transition: left 0.5s;\n}\n\n.btn-primary:hover::before {\n  left: 100%;\n}\n\n/* Progress bars with enhanced animations */\n.progress-animated {\n  background: linear-gradient(135deg, hsl(var(--muted)) 0%, hsl(var(--card)) 100%);\n  overflow: hidden;\n  position: relative;\n}\n\n.progress-animated::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  background: linear-gradient(90deg, \n    hsl(var(--primary)) 0%, \n    hsl(var(--accent)) 50%, \n    hsl(var(--primary)) 100%);\n  transition: width 1s cubic-bezier(0.16, 1, 0.3, 1);\n  box-shadow: 0 0 20px hsl(var(--primary) / 0.3);\n}\n\n/* Achievement badges */\n.achievement-badge {\n  background: linear-gradient(135deg, \n    hsl(var(--primary) / 0.1) 0%, \n    hsl(var(--accent) / 0.1) 100%);\n  border: 2px solid hsl(var(--primary) / 0.2);\n  transition: all 0.3s ease;\n  position: relative;\n  overflow: hidden;\n}\n\n.achievement-badge:hover {\n  border-color: hsl(var(--primary) / 0.5);\n  transform: scale(1.05);\n}\n\n.achievement-badge::after {\n  content: '';\n  position: absolute;\n  top: -50%;\n  left: -50%;\n  width: 200%;\n  height: 200%;\n  background: conic-gradient(\n    transparent, \n    hsl(var(--primary) / 0.1), \n    transparent 30%);\n  animation: rotate 3s linear infinite;\n  opacity: 0;\n  transition: opacity 0.3s;\n}\n\n.achievement-badge:hover::after {\n  opacity: 1;\n}\n\n@keyframes rotate {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* Theme transitions */\n* {\n  transition: background-color 0.3s ease, border-color 0.3s ease, color 0.3s ease;\n}\n\n/* Responsive animations */\n@media (prefers-reduced-motion: reduce) {\n  *, *::before, *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n}\n\n/* Focus improvements */\n.focus-ring {\n  outline: 2px solid hsl(var(--primary));\n  outline-offset: 2px;\n  border-radius: 8px;\n}\n\n/* Loading states */\n.skeleton {\n  background: linear-gradient(90deg, \n    hsl(var(--muted)) 25%, \n    hsl(var(--background)) 50%, \n    hsl(var(--muted)) 75%);\n  background-size: 200% 100%;\n  animation: shimmer 1.5s ease-in-out infinite;\n  border-radius: 8px;\n}","size_bytes":21224},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  login: (user: SelectUser) => void;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", \"/api/logout\");\n      return res.json();\n    },\n    onSuccess: () => {\n      // setUser(null);  // This line is removed as setUser is not defined in this scope\n      queryClient.clear();\n      // Clear all localStorage data\n      localStorage.clear();\n      setLocation(\"/auth\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const login = (user: SelectUser) => {\n    queryClient.setQueryData([\"/api/user\"], user);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        login,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}","size_bytes":3253},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-quiz-state.tsx":{"content":"\nimport React, { createContext, useContext, useState, ReactNode } from \"react\";\n\ninterface Question {\n  id: number;\n  question: string;\n  options: string[];\n  correctAnswer: number;\n  explanation?: string;\n}\n\ninterface Quiz {\n  id: string;\n  title: string;\n  category: string;\n  field: string;\n  questions: Question[];\n  timeLimit: number;\n  isDailyQuiz: boolean;\n}\n\ninterface QuizResults {\n  id: string;\n  score: number;\n  pointsEarned: number;\n  correctAnswers: Question[];\n}\n\ninterface QuizState {\n  currentQuiz: Quiz | null;\n  currentAnswers: number[];\n  timeRemaining: number;\n  quizResults: QuizResults | null;\n  isQuizActive: boolean;\n  lastUpdate?: number;\n}\n\ninterface QuizContextType {\n  quizState: QuizState;\n  setCurrentQuiz: (quiz: Quiz | null) => void;\n  setCurrentAnswers: (answers: number[]) => void;\n  setTimeRemaining: (time: number) => void;\n  setQuizResults: (results: QuizResults | null) => void;\n  setIsQuizActive: (active: boolean) => void;\n  updateAnswer: (questionIndex: number, answer: number) => void;\n  resetQuizState: () => void;\n}\n\nconst QuizContext = createContext<QuizContextType | undefined>(undefined);\n\nconst initialState: QuizState = {\n  currentQuiz: null,\n  currentAnswers: [],\n  timeRemaining: 0,\n  quizResults: null,\n  isQuizActive: false,\n  lastUpdate: Date.now(),\n};\n\n// Load state from localStorage on initialization\nconst loadPersistedState = (): QuizState => {\n  try {\n    const saved = localStorage.getItem('quizState');\n    if (saved) {\n      const parsed = JSON.parse(saved);\n      \n      // Always restore the state if it exists, regardless of active status\n      if (parsed.currentQuiz) {\n        // Check if the quiz was started recently (within 24 hours)\n        const lastUpdate = parsed.lastUpdate || Date.now();\n        const hoursSinceUpdate = (Date.now() - lastUpdate) / (1000 * 60 * 60);\n        \n        if (hoursSinceUpdate < 24) {\n          return { \n            ...parsed, \n            lastUpdate: Date.now(),\n            // Ensure we have valid defaults\n            currentAnswers: parsed.currentAnswers || [],\n            timeRemaining: parsed.timeRemaining || 0,\n            isQuizActive: parsed.isQuizActive || false,\n          };\n        }\n      }\n    }\n  } catch (error) {\n    console.warn('Failed to load persisted quiz state:', error);\n  }\n  \n  return initialState;\n};\n\nexport function QuizProvider({ children }: { children: ReactNode }) {\n  const [quizState, setQuizState] = useState<QuizState>(loadPersistedState);\n\n  const setCurrentQuiz = (quiz: Quiz | null) => {\n    const newState = {\n      ...quizState,\n      currentQuiz: quiz,\n      currentAnswers: quiz ? new Array(quiz.questions.length).fill(-1) : [],\n      timeRemaining: quiz ? 20 * 60 : 0, // Always 20 minutes (1200 seconds)\n      isQuizActive: !!quiz,\n      quizResults: null,\n      lastUpdate: Date.now(),\n    };\n    setQuizState(newState);\n    // Persist to localStorage\n    if (quiz) {\n      localStorage.setItem('quizState', JSON.stringify(newState));\n    } else {\n      localStorage.removeItem('quizState');\n    }\n  };\n\n  const setCurrentAnswers = (answers: number[]) => {\n    setQuizState(prev => ({ ...prev, currentAnswers: answers }));\n  };\n\n  const setTimeRemaining = (time: number | ((prev: number) => number)) => {\n    setQuizState(prev => {\n      const newTime = typeof time === 'function' ? time(prev.timeRemaining || 0) : time;\n      const validTime = isNaN(newTime) ? 0 : Math.max(0, newTime);\n      const newState = { ...prev, timeRemaining: validTime, lastUpdate: Date.now() };\n      if (prev.currentQuiz && prev.isQuizActive) {\n        localStorage.setItem('quizState', JSON.stringify(newState));\n      }\n      return newState;\n    });\n  };\n\n  const setQuizResults = (results: QuizResults | null) => {\n    setQuizState(prev => {\n      const newState = { \n        ...prev, \n        quizResults: results,\n        isQuizActive: false,\n      };\n      localStorage.setItem('quizState', JSON.stringify(newState));\n      return newState;\n    });\n  };\n\n  const setIsQuizActive = (active: boolean) => {\n    setQuizState(prev => {\n      const newState = { ...prev, isQuizActive: active };\n      if (prev.currentQuiz) {\n        localStorage.setItem('quizState', JSON.stringify(newState));\n      }\n      return newState;\n    });\n  };\n\n  const updateAnswer = (questionIndex: number, answer: number) => {\n    setQuizState(prev => {\n      const newAnswers = [...prev.currentAnswers];\n      newAnswers[questionIndex] = answer;\n      const newState = { ...prev, currentAnswers: newAnswers, lastUpdate: Date.now() };\n      // Always persist when quiz state changes\n      localStorage.setItem('quizState', JSON.stringify(newState));\n      return newState;\n    });\n  };\n\n  const resetQuizState = () => {\n    const clearedState = { ...initialState, lastUpdate: Date.now() };\n    setQuizState(clearedState);\n    localStorage.removeItem('quizState');\n  };\n\n  return (\n    <QuizContext.Provider\n      value={{\n        quizState,\n        setCurrentQuiz,\n        setCurrentAnswers,\n        setTimeRemaining,\n        setQuizResults,\n        setIsQuizActive,\n        updateAnswer,\n        resetQuizState,\n      }}\n    >\n      {children}\n    </QuizContext.Provider>\n  );\n}\n\nexport function useQuizState() {\n  const context = useContext(QuizContext);\n  if (context === undefined) {\n    throw new Error(\"useQuizState must be used within a QuizProvider\");\n  }\n  return context;\n}\n","size_bytes":5401},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/protected-route.tsx":{"content":"import { ReactNode } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Route, Redirect } from \"wouter\";\n\ninterface ProtectedRouteProps {\n  path: string;\n  component: React.ComponentType<any>;\n}\n\nexport function ProtectedRoute({ \n  path, \n  component: Component \n}: ProtectedRouteProps) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-background via-background/80 to-primary/5\">\n        <div className=\"relative\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-4 border-transparent border-t-primary border-r-accent\"></div>\n          <div className=\"absolute inset-0 animate-pulse rounded-full bg-gradient-to-r from-primary/20 to-accent/20\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Route path={path}>\n      {user ? <Component /> : <Redirect to=\"/auth\" />}\n    </Route>\n  );\n}","size_bytes":953},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/auth-page.tsx":{"content":"\nimport React, { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\nconst loginSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nconst registerSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\ntype RegisterForm = z.infer<typeof registerSchema>;\n\nexport default function AuthPage() {\n  const [isLogin, setIsLogin] = useState(true);\n  const { user, login } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  // Always call hooks in the same order\n  const loginForm = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", data);\n      if (!res.ok) {\n        const error = await res.json();\n        throw new Error(error.message || \"Login failed\");\n      }\n      return res.json();\n    },\n    onSuccess: (data) => {\n      login(data);\n      toast({\n        title: \"Login successful\",\n        description: `Welcome back, ${data.username}!`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterForm) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", {\n        username: data.username,\n        password: data.password,\n      });\n      if (!res.ok) {\n        const error = await res.json();\n        throw new Error(error.message || \"Registration failed\");\n      }\n      return res.json();\n    },\n    onSuccess: (data) => {\n      login(data);\n      toast({\n        title: \"Registration successful\",\n        description: `Welcome, ${data.username}!`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Redirect if already logged in\n  useEffect(() => {\n    if (user) {\n      setLocation(\"/\");\n    }\n  }, [user, setLocation]);\n\n  // Early return after hooks\n  if (user) {\n    return null;\n  }\n\n  const onLoginSubmit = (data: LoginForm) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegisterSubmit = (data: RegisterForm) => {\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-background to-muted p-4\">\n      <Card className=\"w-full max-w-md shadow-xl\">\n        <CardHeader className=\"text-center space-y-2\">\n          <CardTitle className=\"text-3xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n            QuizMaster Pro\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            {isLogin ? \"Welcome back! Sign in to continue.\" : \"Create your account to get started.\"}\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {isLogin ? (\n            <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\">Username</Label>\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  placeholder=\"Enter your username\"\n                  {...loginForm.register(\"username\")}\n                  className=\"w-full\"\n                />\n                {loginForm.formState.errors.username && (\n                  <p className=\"text-sm text-destructive\">\n                    {loginForm.formState.errors.username.message}\n                  </p>\n                )}\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"Enter your password\"\n                  {...loginForm.register(\"password\")}\n                  className=\"w-full\"\n                />\n                {loginForm.formState.errors.password && (\n                  <p className=\"text-sm text-destructive\">\n                    {loginForm.formState.errors.password.message}\n                  </p>\n                )}\n              </div>\n              \n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={loginMutation.isPending}\n              >\n                {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n            </form>\n          ) : (\n            <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"reg-username\">Username</Label>\n                <Input\n                  id=\"reg-username\"\n                  type=\"text\"\n                  placeholder=\"Choose a username\"\n                  {...registerForm.register(\"username\")}\n                  className=\"w-full\"\n                />\n                {registerForm.formState.errors.username && (\n                  <p className=\"text-sm text-destructive\">\n                    {registerForm.formState.errors.username.message}\n                  </p>\n                )}\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"reg-password\">Password</Label>\n                <Input\n                  id=\"reg-password\"\n                  type=\"password\"\n                  placeholder=\"Create a password\"\n                  {...registerForm.register(\"password\")}\n                  className=\"w-full\"\n                />\n                {registerForm.formState.errors.password && (\n                  <p className=\"text-sm text-destructive\">\n                    {registerForm.formState.errors.password.message}\n                  </p>\n                )}\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                <Input\n                  id=\"confirmPassword\"\n                  type=\"password\"\n                  placeholder=\"Confirm your password\"\n                  {...registerForm.register(\"confirmPassword\")}\n                  className=\"w-full\"\n                />\n                {registerForm.formState.errors.confirmPassword && (\n                  <p className=\"text-sm text-destructive\">\n                    {registerForm.formState.errors.confirmPassword.message}\n                  </p>\n                )}\n              </div>\n              \n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={registerMutation.isPending}\n              >\n                {registerMutation.isPending ? \"Creating account...\" : \"Create Account\"}\n              </Button>\n            </form>\n          )}\n\n          <div className=\"text-center\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => {\n                setIsLogin(!isLogin);\n                loginForm.reset();\n                registerForm.reset();\n              }}\n              className=\"text-primary hover:text-primary/80\"\n            >\n              {isLogin \n                ? \"Don't have an account? Sign up\" \n                : \"Already have an account? Sign in\"\n              }\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8720},"client/src/pages/home-page.tsx":{"content":"import { useState } from \"react\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Dashboard from \"@/components/dashboard/dashboard\";\nimport QuizSelection from \"@/components/quiz/quiz-selection\";\nimport ActiveQuiz from \"@/components/quiz/active-quiz\";\nimport QuizResults from \"@/components/quiz/quiz-results\";\nimport Leaderboard from \"@/components/leaderboard/leaderboard\";\nimport Profile from \"@/components/profile/profile\";\nimport { useQuizState } from \"@/hooks/use-quiz-state\";\n\nexport type Section = \"dashboard\" | \"quiz\" | \"leaderboard\" | \"profile\";\n\nexport default function HomePage() {\n  // Load persisted section from localStorage\n  const getInitialSection = (): Section => {\n    try {\n      // First check if there's a quiz state that should take precedence\n      const saved = localStorage.getItem('quizState');\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        // Return quiz section if there's an active quiz, quiz results, or current quiz\n        if (parsed.currentQuiz && (parsed.isQuizActive || parsed.quizResults)) {\n          return \"quiz\";\n        }\n      }\n      \n      // Then check saved section\n      const savedSection = localStorage.getItem('currentSection');\n      if (savedSection && ['dashboard', 'quiz', 'leaderboard', 'profile'].includes(savedSection)) {\n        return savedSection as Section;\n      }\n    } catch (error) {\n      console.warn('Failed to load persisted section:', error);\n    }\n    return \"dashboard\";\n  };\n\n  const [currentSection, setCurrentSection] = useState<Section>(getInitialSection);\n  const { quizState, setCurrentQuiz, setQuizResults, resetQuizState } = useQuizState();\n\n  const handleSectionChange = (section: Section) => {\n    setCurrentSection(section);\n    // Always save current section to localStorage\n    try {\n      localStorage.setItem('currentSection', section);\n    } catch (error) {\n      console.warn('Failed to save section:', error);\n    }\n  };\n\n  const handleQuizStart = (quiz: any) => {\n    setCurrentQuiz(quiz);\n  };\n\n  const handleQuizComplete = (results: any) => {\n    setQuizResults(results);\n  };\n\n  const handleStartQuiz = () => {\n    // Clear any existing quiz state when starting fresh\n    resetQuizState();\n    setCurrentSection(\"quiz\");\n  };\n\n  const renderContent = () => {\n    switch (currentSection) {\n      case \"dashboard\":\n        return <Dashboard onStartQuiz={handleStartQuiz} />;\n      case \"quiz\":\n        // Show results if available\n        if (quizState.quizResults && quizState.currentQuiz) {\n          return (\n            <QuizResults\n              results={quizState.quizResults}\n              onTakeAnother={() => {\n                resetQuizState();\n                setCurrentSection(\"quiz\");\n              }}\n              onViewLeaderboard={() => {\n                setCurrentSection(\"leaderboard\");\n              }}\n            />\n          );\n        }\n        // Show active quiz if there's a current quiz and it's active\n        if (quizState.currentQuiz && quizState.isQuizActive) {\n          return (\n            <ActiveQuiz\n              quiz={quizState.currentQuiz}\n              onQuizComplete={handleQuizComplete}\n            />\n          );\n        }\n        // Show quiz selection by default\n        return <QuizSelection onQuizStart={handleQuizStart} />;\n      case \"leaderboard\":\n        return <Leaderboard />;\n      case \"profile\":\n        return <Profile />;\n      default:\n        return <Dashboard onStartQuiz={handleStartQuiz} />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar \n        currentSection={currentSection}\n        onSectionChange={handleSectionChange}\n      />\n      <div className=\"flex\">\n        <Sidebar \n          currentSection={currentSection} \n          onSectionChange={handleSectionChange} \n        />\n        <main className=\"flex-1 p-6 md:p-8 overflow-auto\">\n          {renderContent()}\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":3994},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/dashboard/dashboard.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Star, ClipboardList, Medal, Calendar, Clock, CheckCircle, Trophy, Play } from \"lucide-react\";\nimport type { UserWithStats, QuizAttempt } from \"@shared/schema\";\n\ninterface DashboardProps {\n  onStartQuiz: () => void;\n}\n\nexport default function Dashboard({ onStartQuiz }: DashboardProps) {\n  const { user } = useAuth();\n\n  const { data: userStats, isLoading: statsLoading } = useQuery<UserWithStats>({\n    queryKey: [\"/api/profile\"],\n    enabled: !!user,\n  });\n\n  const { data: quizHistory, isLoading: historyLoading } = useQuery<QuizAttempt[]>({\n    queryKey: [\"/api/quiz-history\"],\n    enabled: !!user,\n  });\n\n  if (statsLoading) {\n    return (\n      <div className=\"space-y-6 animate-pulse\">\n        <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {[1, 2, 3].map((i) => (\n            <div key={i} className=\"h-32 bg-muted rounded-lg\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const recentActivity = quizHistory?.slice(0, 3) || [];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-2\">\n          Welcome back, <span data-testid=\"text-welcome-username\">{user?.username}</span>!\n        </h1>\n        <p className=\"text-muted-foreground\">Ready to challenge your knowledge today?</p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-8\">\n        <Card className=\"modern-card overflow-hidden group\">\n          <CardContent className=\"p-6 relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n            <div className=\"flex items-center justify-between relative z-10\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground mb-2\">Total Score</p>\n                <p className=\"text-3xl font-bold text-primary\" data-testid=\"stat-total-score\">\n                  {userStats?.totalScore?.toLocaleString() || 0}\n                </p>\n              </div>\n              <div className=\"w-16 h-16 rounded-2xl bg-gradient-to-br from-primary/20 to-primary/30 flex items-center justify-center group-hover:scale-110 transition-transform duration-300 float\">\n                <Star className=\"text-primary h-8 w-8\" />\n              </div>\n            </div>\n            <div className=\"mt-4 text-xs text-muted-foreground\">\n              <div className=\"flex items-center space-x-1\">\n                <div className=\"w-2 h-2 rounded-full bg-primary/60\" />\n                <span>Total points earned</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"modern-card overflow-hidden group\">\n          <CardContent className=\"p-6 relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-accent/5 via-transparent to-accent/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n            <div className=\"flex items-center justify-between relative z-10\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground mb-2\">Quizzes Taken</p>\n                <p className=\"text-3xl font-bold text-accent\" data-testid=\"stat-quizzes-taken\">\n                  {userStats?.quizzesTaken || 0}\n                </p>\n              </div>\n              <div className=\"w-16 h-16 rounded-2xl bg-gradient-to-br from-accent/20 to-accent/30 flex items-center justify-center group-hover:scale-110 transition-transform duration-300 float\">\n                <ClipboardList className=\"text-accent h-8 w-8\" />\n              </div>\n            </div>\n            <div className=\"mt-4 text-xs text-muted-foreground\">\n              <div className=\"flex items-center space-x-1\">\n                <div className=\"w-2 h-2 rounded-full bg-accent/60\" />\n                <span>Quizzes completed</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"modern-card overflow-hidden group\">\n          <CardContent className=\"p-6 relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-secondary/5 via-transparent to-secondary/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n            <div className=\"flex items-center justify-between relative z-10\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground mb-2\">Current Rank</p>\n                <p className=\"text-3xl font-bold text-secondary\" data-testid=\"stat-current-rank\">\n                  {userStats?.rank ? `#${userStats.rank}` : \"Unranked\"}\n                </p>\n              </div>\n              <div className=\"w-16 h-16 rounded-2xl bg-gradient-to-br from-secondary/20 to-secondary/30 flex items-center justify-center group-hover:scale-110 transition-transform duration-300 float\">\n                <Medal className=\"text-secondary h-8 w-8\" />\n              </div>\n            </div>\n            <div className=\"mt-4 text-xs text-muted-foreground\">\n              <div className=\"flex items-center space-x-1\">\n                <div className=\"w-2 h-2 rounded-full bg-secondary/60\" />\n                <span>Global leaderboard</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Quick Start Quiz */}\n        <Card className=\"modern-card overflow-hidden\">\n          <CardContent className=\"p-8 relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-accent/5\" />\n            <div className=\"relative z-10\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-6 flex items-center\">\n                <Calendar className=\"mr-3 h-6 w-6 text-primary\" />\n                Quick Start\n              </h2>\n              <div className=\"text-center p-8 glass-effect rounded-2xl\">\n                <div className=\"relative mb-6\">\n                  <div className=\"w-20 h-20 rounded-2xl bg-gradient-to-br from-primary/20 to-accent/20 flex items-center justify-center mx-auto mb-4 float\">\n                    <Play className=\"h-10 w-10 text-primary\" />\n                  </div>\n                  <div className=\"absolute inset-0 w-20 h-20 rounded-2xl bg-gradient-to-br from-primary/10 to-accent/10 mx-auto blur-xl opacity-60\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-foreground mb-3\">Ready for a Challenge?</h3>\n                <p className=\"text-muted-foreground mb-6 leading-relaxed\">\n                  Test your knowledge with AI-generated questions across multiple categories\n                </p>\n                <Button \n                  onClick={onStartQuiz} \n                  className=\"w-full bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white font-semibold py-4 rounded-xl transition-all duration-300 transform hover:scale-105 pulse-glow\"\n                  data-testid=\"button-start-quiz\"\n                >\n                  <Play className=\"mr-2 h-5 w-5\" />\n                  Start Quiz\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Activity */}\n        <Card className=\"modern-card overflow-hidden\">\n          <CardContent className=\"p-6\">\n            <h2 className=\"text-xl font-semibold text-foreground mb-4 flex items-center\">\n              <Clock className=\"text-secondary mr-2 h-5 w-5\" />\n              Recent Activity\n            </h2>\n            <div className=\"h-80 overflow-y-auto pr-2 scrollbar-thin scrollbar-thumb-primary/20 scrollbar-track-transparent\">\n              <div className=\"space-y-3\">\n                {historyLoading ? (\n                  <div className=\"space-y-3\">\n                    {[1, 2, 3, 4, 5].map((i) => (\n                      <div key={i} className=\"h-16 bg-muted rounded-lg animate-pulse\"></div>\n                    ))}\n                  </div>\n                ) : quizHistory && quizHistory.length > 0 ? (\n                  quizHistory.slice(0, 10).map((attempt, index) => (\n                    <div key={attempt.id} className=\"glass-effect p-4 rounded-lg hover:bg-primary/5 transition-all duration-200 group\" data-testid={`activity-${attempt.id}`}>\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"bg-gradient-to-br from-primary/20 to-accent/20 p-2 rounded-full group-hover:scale-110 transition-transform duration-200\">\n                          <CheckCircle className=\"text-primary h-4 w-4\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between\">\n                            <p className=\"text-sm font-medium text-foreground\">Quiz #{index + 1}</p>\n                            <span className=\"text-xs text-muted-foreground\">\n                              {new Date(attempt.completedAt).toLocaleDateString()}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center space-x-4 mt-1\">\n                            <span className=\"text-xs px-2 py-1 bg-primary/10 text-primary rounded-full font-medium\">\n                              {attempt.score}% Score\n                            </span>\n                            <span className=\"text-xs px-2 py-1 bg-accent/10 text-accent rounded-full font-medium\">\n                              +{attempt.pointsEarned} pts\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-12 glass-effect rounded-lg\">\n                    <Trophy className=\"h-12 w-12 text-muted-foreground mx-auto mb-4 opacity-50\" />\n                    <p className=\"text-sm text-muted-foreground mb-2\">No quiz activity yet</p>\n                    <p className=\"text-xs text-muted-foreground\">Take your first quiz to see your activity here</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10682},"client/src/components/layout/navbar.tsx":{"content":"\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Brain, Menu, LogOut, Settings, Sparkles, Moon, Sun, Monitor, Bell, Shield, Palette, Save, Eye, EyeOff, Zap } from \"lucide-react\";\nimport type { Section } from \"@/pages/home-page\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useState, useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface NavbarProps {\n  currentSection: Section;\n  onSectionChange: (section: Section) => void;\n}\n\nexport default function Navbar({ currentSection, onSectionChange }: NavbarProps) {\n  const { user, logoutMutation } = useAuth();\n  const isMobile = useIsMobile();\n  const { toast } = useToast();\n  \n  // Settings state\n  const [showSettings, setShowSettings] = useState(false);\n  const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'dark');\n  const [notificationsEnabled, setNotificationsEnabled] = useState(() => \n    JSON.parse(localStorage.getItem('notifications') || 'true')\n  );\n  const [privacyMode, setPrivacyMode] = useState(() => \n    JSON.parse(localStorage.getItem('privacyMode') || 'false')\n  );\n  const [autoSave, setAutoSave] = useState(() => \n    JSON.parse(localStorage.getItem('autoSave') || 'true')\n  );\n  const [language, setLanguage] = useState(() => localStorage.getItem('language') || 'en');\n  const [soundEffects, setSoundEffects] = useState(() => \n    JSON.parse(localStorage.getItem('soundEffects') || 'true')\n  );\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const applySettings = () => {\n    localStorage.setItem('theme', theme);\n    localStorage.setItem('notifications', JSON.stringify(notificationsEnabled));\n    localStorage.setItem('privacyMode', JSON.stringify(privacyMode));\n    localStorage.setItem('autoSave', JSON.stringify(autoSave));\n    localStorage.setItem('language', language);\n    localStorage.setItem('soundEffects', JSON.stringify(soundEffects));\n    \n    // Apply theme\n    document.documentElement.setAttribute('data-theme', theme);\n    \n    setShowSettings(false);\n    toast({\n      title: \"Settings Applied\",\n      description: \"Your preferences have been saved successfully!\",\n    });\n  };\n\n  useEffect(() => {\n    document.documentElement.setAttribute('data-theme', theme);\n  }, [theme]);\n\n  const navItems = [\n    { key: \"dashboard\" as const, label: \"Dashboard\", icon: \"fas fa-tachometer-alt\" },\n    { key: \"quiz\" as const, label: \"Take Quiz\", icon: \"fas fa-play-circle\" },\n    { key: \"leaderboard\" as const, label: \"Leaderboard\", icon: \"fas fa-trophy\" },\n    { key: \"profile\" as const, label: \"Profile\", icon: \"fas fa-user\" },\n  ];\n\n  return (\n    <>\n      {/* Desktop Navbar */}\n      <nav className=\"glass-morphism border-b border-primary/20 sticky top-0 z-50 backdrop-blur-xl bg-background/80\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-primary/5 via-transparent to-accent/5\"></div>\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"relative group\">\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-primary to-accent rounded-xl blur opacity-75 group-hover:opacity-100 animate-pulse\"></div>\n                  <div className=\"relative w-10 h-10 rounded-xl bg-gradient-to-br from-primary/20 to-accent/20 flex items-center justify-center border border-primary/30\">\n                    <Brain className=\"h-6 w-6 text-primary animate-bounce\" style={{ animationDuration: \"2s\" }} />\n                  </div>\n                </div>\n                <span className=\"text-xl font-black gradient-text\">QuizMaster Pro</span>\n              </div>\n            </div>\n            \n            {!isMobile && (\n              <div className=\"hidden md:flex items-center space-x-6\">\n                {navItems.map((item) => (\n                  <button\n                    key={item.key}\n                    className={`relative group px-4 py-2 rounded-lg transition-all duration-300 ${\n                      currentSection === item.key \n                        ? \"text-primary bg-gradient-to-r from-primary/10 to-accent/10 border border-primary/30\" \n                        : \"text-foreground hover:text-primary hover:bg-gradient-to-r hover:from-primary/5 hover:to-accent/5\"\n                    }`}\n                    onClick={() => onSectionChange(item.key)}\n                    data-testid={`nav-${item.key}`}\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-primary/10 to-accent/10 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                    <div className=\"relative flex items-center\">\n                      <i className={`${item.icon} mr-2`}></i>\n                      {item.label}\n                    </div>\n                  </button>\n                ))}\n              </div>\n            )}\n\n            <div className=\"flex items-center space-x-4\">\n              {/* Settings Dialog */}\n              <Dialog open={showSettings} onOpenChange={setShowSettings}>\n                <DialogTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"relative group overflow-hidden glass-morphism border border-primary/20 hover:border-primary/40\"\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-primary/10 to-accent/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                    <Settings className=\"h-4 w-4 relative z-10 group-hover:rotate-180 transition-transform duration-500\" />\n                    <Sparkles className=\"ml-2 h-3 w-3 animate-sparkle\" />\n                  </Button>\n                </DialogTrigger>\n                \n                <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto glass-morphism border-2 border-primary/30 backdrop-blur-xl\">\n                  <DialogHeader>\n                    <DialogTitle className=\"text-3xl font-black bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent flex items-center\">\n                      <Settings className=\"mr-4 h-8 w-8 text-primary animate-spin\" style={{ animationDuration: \"3s\" }} />\n                      Advanced Settings & Preferences\n                    </DialogTitle>\n                  </DialogHeader>\n                  \n                  <div className=\"space-y-8 p-2\">\n                    {/* Appearance Section */}\n                    <div className=\"glass-morphism p-6 rounded-2xl border border-primary/10\">\n                      <h3 className=\"text-2xl font-bold mb-6 flex items-center text-foreground\">\n                        <Palette className=\"mr-3 h-6 w-6 text-primary\" />\n                        Appearance & Theme\n                      </h3>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                        {[\n                          { id: \"light\", icon: Sun, label: \"Light Mode\", desc: \"Clean and bright\" },\n                          { id: \"dark\", icon: Moon, label: \"Dark Mode\", desc: \"Easy on the eyes\" },\n                          { id: \"system\", icon: Monitor, label: \"Auto\", desc: \"Follows system\" }\n                        ].map((themeOption) => {\n                          const Icon = themeOption.icon;\n                          return (\n                            <button\n                              key={themeOption.id}\n                              onClick={() => setTheme(themeOption.id)}\n                              className={`p-6 rounded-xl border-2 transition-all duration-300 transform hover:scale-105 ${\n                                theme === themeOption.id \n                                  ? 'bg-gradient-to-br from-primary/20 to-accent/20 border-primary/50 shadow-lg shadow-primary/20' \n                                  : 'glass-effect border-border/50 hover:border-primary/30'\n                              }`}\n                            >\n                              <Icon className={`h-8 w-8 mx-auto mb-3 ${theme === themeOption.id ? 'text-primary' : 'text-muted-foreground'}`} />\n                              <h4 className=\"font-semibold text-lg\">{themeOption.label}</h4>\n                              <p className=\"text-sm text-muted-foreground\">{themeOption.desc}</p>\n                            </button>\n                          );\n                        })}\n                      </div>\n                    </div>\n\n                    {/* Preferences Section */}\n                    <div className=\"glass-morphism p-6 rounded-2xl border border-primary/10\">\n                      <h3 className=\"text-2xl font-bold mb-6 flex items-center text-foreground\">\n                        <Zap className=\"mr-3 h-6 w-6 text-accent\" />\n                        Performance & Features\n                      </h3>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        {[\n                          { \n                            icon: Save, \n                            label: \"Auto Save\", \n                            desc: \"Automatically save progress\",\n                            checked: autoSave, \n                            onChange: setAutoSave \n                          },\n                          { \n                            icon: Zap, \n                            label: \"Sound Effects\", \n                            desc: \"Enable audio feedback\",\n                            checked: soundEffects, \n                            onChange: setSoundEffects \n                          }\n                        ].map((setting, i) => {\n                          const Icon = setting.icon;\n                          return (\n                            <div key={i} className=\"glass-effect p-4 rounded-xl border border-primary/10 hover:border-primary/20 transition-all duration-300 group\">\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center space-x-3\">\n                                  <div className=\"p-2 rounded-lg bg-gradient-to-br from-accent/20 to-primary/20\">\n                                    <Icon className=\"h-5 w-5 text-accent\" />\n                                  </div>\n                                  <div>\n                                    <span className=\"font-semibold text-foreground\">{setting.label}</span>\n                                    <p className=\"text-sm text-muted-foreground\">{setting.desc}</p>\n                                  </div>\n                                </div>\n                                <Switch \n                                  checked={setting.checked} \n                                  onCheckedChange={setting.onChange}\n                                  className=\"data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-accent data-[state=checked]:to-primary\"\n                                />\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n\n                    {/* Privacy & Security */}\n                    <div className=\"glass-morphism p-6 rounded-2xl border border-primary/10\">\n                      <h3 className=\"text-2xl font-bold mb-6 flex items-center text-foreground\">\n                        <Shield className=\"mr-3 h-6 w-6 text-green-400\" />\n                        Privacy & Security\n                      </h3>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        {[\n                          { \n                            icon: Bell, \n                            label: \"Push Notifications\", \n                            desc: \"Get notified about updates\",\n                            checked: notificationsEnabled, \n                            onChange: setNotificationsEnabled \n                          },\n                          { \n                            icon: privacyMode ? EyeOff : Eye, \n                            label: \"Privacy Mode\", \n                            desc: \"Hide personal information\",\n                            checked: privacyMode, \n                            onChange: setPrivacyMode \n                          }\n                        ].map((setting, i) => {\n                          const Icon = setting.icon;\n                          return (\n                            <div key={i} className=\"glass-effect p-4 rounded-xl border border-primary/10 hover:border-primary/20 transition-all duration-300\">\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center space-x-3\">\n                                  <div className=\"p-2 rounded-lg bg-gradient-to-br from-green-500/20 to-emerald-500/20\">\n                                    <Icon className=\"h-5 w-5 text-green-400\" />\n                                  </div>\n                                  <div>\n                                    <span className=\"font-semibold text-foreground\">{setting.label}</span>\n                                    <p className=\"text-sm text-muted-foreground\">{setting.desc}</p>\n                                  </div>\n                                </div>\n                                <Switch \n                                  checked={setting.checked} \n                                  onCheckedChange={setting.onChange}\n                                  className=\"data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-green-400 data-[state=checked]:to-emerald-400\"\n                                />\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                      \n                      {/* Language Selection */}\n                      <div className=\"mt-6 glass-effect p-4 rounded-xl border border-primary/10\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"p-2 rounded-lg bg-gradient-to-br from-blue-500/20 to-purple-500/20\">\n                              <Monitor className=\"h-5 w-5 text-blue-400\" />\n                            </div>\n                            <div>\n                              <span className=\"font-semibold text-foreground\">Language</span>\n                              <p className=\"text-sm text-muted-foreground\">Choose your preferred language</p>\n                            </div>\n                          </div>\n                          <Select value={language} onValueChange={setLanguage}>\n                            <SelectTrigger className=\"w-40 glass-effect\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"en\">English</SelectItem>\n                              <SelectItem value=\"es\">Español</SelectItem>\n                              <SelectItem value=\"fr\">Français</SelectItem>\n                              <SelectItem value=\"de\">Deutsch</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Apply Settings Button */}\n                    <div className=\"flex justify-end space-x-4\">\n                      <Button\n                        variant=\"outline\"\n                        onClick={() => setShowSettings(false)}\n                        className=\"px-8 py-3 rounded-xl font-semibold glass-morphism\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        onClick={applySettings}\n                        className=\"relative group overflow-hidden bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white font-bold px-8 py-3 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105\"\n                      >\n                        <div className=\"absolute inset-0 bg-white/20 transform -skew-x-12 -translate-x-full group-hover:translate-x-full transition-transform duration-700 ease-out\"></div>\n                        <div className=\"relative flex items-center\">\n                          <Save className=\"mr-2 h-5 w-5\" />\n                          Apply Settings\n                          <Sparkles className=\"ml-2 h-4 w-4 animate-sparkle\" />\n                        </div>\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n\n              <span className=\"text-sm text-muted-foreground hidden sm:block\" data-testid=\"text-username\">\n                {user?.username}\n              </span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleLogout}\n                disabled={logoutMutation.isPending}\n                data-testid=\"button-logout\"\n                className=\"text-destructive hover:text-destructive/80 glass-morphism border border-red-500/20 hover:border-red-500/40\"\n              >\n                <LogOut className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Mobile Navigation */}\n      {isMobile && (\n        <div className=\"md:hidden glass-morphism border-t border-primary/20 backdrop-blur-xl\">\n          <div className=\"flex justify-around py-2\">\n            {navItems.map((item) => (\n              <button\n                key={item.key}\n                className={`flex flex-col items-center p-2 rounded-lg transition-all duration-300 ${\n                  currentSection === item.key \n                    ? \"text-primary bg-gradient-to-b from-primary/10 to-accent/10\" \n                    : \"text-muted-foreground hover:text-primary\"\n                }`}\n                onClick={() => onSectionChange(item.key)}\n                data-testid={`mobile-nav-${item.key}`}\n              >\n                <i className={`${item.icon} text-lg`}></i>\n                <span className=\"text-xs mt-1\">{item.label}</span>\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","size_bytes":19033},"client/src/components/layout/sidebar.tsx":{"content":"import { Brain } from \"lucide-react\";\nimport type { Section } from \"@/pages/home-page\";\n\ninterface SidebarProps {\n  currentSection: Section;\n  onSectionChange: (section: Section) => void;\n}\n\nexport default function Sidebar({ currentSection, onSectionChange }: SidebarProps) {\n  const navItems = [\n    { key: \"dashboard\" as const, label: \"Dashboard\", icon: \"fas fa-tachometer-alt\" },\n    { key: \"quiz\" as const, label: \"Take Quiz\", icon: \"fas fa-play-circle\" },\n    { key: \"leaderboard\" as const, label: \"Leaderboard\", icon: \"fas fa-trophy\" },\n    { key: \"profile\" as const, label: \"Profile\", icon: \"fas fa-user\" },\n  ];\n\n  return (\n    <aside className=\"hidden lg:flex lg:flex-col lg:w-64 bg-card border-r border-border\">\n      <div className=\"flex-1 flex flex-col pt-5 pb-4 overflow-y-auto\">\n        <div className=\"flex items-center flex-shrink-0 px-4 mb-6\">\n          <Brain className=\"h-8 w-8 text-primary mr-2\" />\n          <span className=\"text-lg font-bold\">QuizMaster Pro</span>\n        </div>\n        \n        <nav className=\"mt-5 flex-1 px-2 space-y-1\">\n          {navItems.map((item) => (\n            <button\n              key={item.key}\n              className={`group flex items-center px-2 py-2 text-sm font-medium rounded-md transition-colors w-full text-left ${\n                currentSection === item.key\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"text-foreground hover:bg-muted hover:text-foreground\"\n              }`}\n              onClick={() => onSectionChange(item.key)}\n              data-testid={`sidebar-${item.key}`}\n            >\n              <i className={`${item.icon} mr-3 ${\n                currentSection === item.key \n                  ? \"text-primary-foreground\" \n                  : \"text-muted-foreground group-hover:text-foreground\"\n              }`}></i>\n              {item.label}\n            </button>\n          ))}\n        </nav>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":1940},"client/src/components/leaderboard/leaderboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Trophy, Medal, Award } from \"lucide-react\";\nimport type { LeaderboardEntry } from \"@shared/schema\";\n\nexport default function Leaderboard() {\n  const { user } = useAuth();\n  \n  const { data: leaderboard, isLoading } = useQuery<LeaderboardEntry[]>({\n    queryKey: [\"/api/leaderboard\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6 animate-pulse\">\n        <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n        <div className=\"h-32 bg-muted rounded-lg\"></div>\n        <div className=\"h-96 bg-muted rounded-lg\"></div>\n      </div>\n    );\n  }\n\n  const topThree = leaderboard?.slice(0, 3) || [];\n  const restOfLeaderboard = leaderboard?.slice(3) || [];\n  const userEntry = leaderboard?.find(entry => entry.username === user?.username);\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-2\">Leaderboard</h1>\n        <p className=\"text-muted-foreground\">See how you stack up against other quiz masters</p>\n      </div>\n\n      {/* Top 3 Podium */}\n      {topThree.length >= 3 && (\n        <Card className=\"shadow-sm\">\n          <CardContent className=\"p-8\">\n            <div className=\"flex justify-center items-end space-x-8\">\n              {/* 2nd Place */}\n              <div className=\"text-center\" data-testid=\"podium-second\">\n                <div className=\"bg-muted w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-xl font-bold text-foreground\">\n                    {topThree[1]?.username.slice(0, 2).toUpperCase()}\n                  </span>\n                </div>\n                <h3 className=\"font-semibold text-foreground\">{topThree[1]?.username}</h3>\n                <p className=\"text-sm text-muted-foreground\">{topThree[1]?.totalScore.toLocaleString()} pts</p>\n                <div className=\"bg-chart-2 w-20 h-16 rounded-t-lg mt-2 flex items-center justify-center\">\n                  <span className=\"text-white font-bold text-lg\">2</span>\n                </div>\n              </div>\n\n              {/* 1st Place */}\n              <div className=\"text-center\" data-testid=\"podium-first\">\n                <div className=\"bg-accent w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-2 border-4 border-accent/30\">\n                  <span className=\"text-xl font-bold text-accent-foreground\">\n                    {topThree[0]?.username.slice(0, 2).toUpperCase()}\n                  </span>\n                </div>\n                <h3 className=\"font-semibold text-foreground\">{topThree[0]?.username}</h3>\n                <p className=\"text-sm text-muted-foreground\">{topThree[0]?.totalScore.toLocaleString()} pts</p>\n                <div className=\"bg-accent w-20 h-24 rounded-t-lg mt-2 flex items-center justify-center\">\n                  <span className=\"text-white font-bold text-xl\">1</span>\n                </div>\n              </div>\n\n              {/* 3rd Place */}\n              <div className=\"text-center\" data-testid=\"podium-third\">\n                <div className=\"bg-muted w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-xl font-bold text-foreground\">\n                    {topThree[2]?.username.slice(0, 2).toUpperCase()}\n                  </span>\n                </div>\n                <h3 className=\"font-semibold text-foreground\">{topThree[2]?.username}</h3>\n                <p className=\"text-sm text-muted-foreground\">{topThree[2]?.totalScore.toLocaleString()} pts</p>\n                <div className=\"bg-chart-3 w-20 h-12 rounded-t-lg mt-2 flex items-center justify-center\">\n                  <span className=\"text-white font-bold text-lg\">3</span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Full Leaderboard */}\n      <Card className=\"shadow-sm\">\n        <CardHeader>\n          <CardTitle>Full Rankings</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-muted\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Rank\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Player\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Score\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Quizzes\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Avg %\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-card divide-y divide-border\">\n                {leaderboard?.map((player) => {\n                  const isCurrentUser = player.username === user?.username;\n                  return (\n                    <tr\n                      key={player.id}\n                      className={`hover:bg-muted transition-colors ${\n                        isCurrentUser ? \"bg-primary/5\" : \"\"\n                      }`}\n                      data-testid={`leaderboard-row-${player.rank}`}\n                    >\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"text-lg font-bold leaderboard-rank\">\n                            {player.rank}\n                          </span>\n                          {player.rank <= 3 && (\n                            <div className=\"text-accent\">\n                              {player.rank === 1 && <Trophy className=\"h-4 w-4\" />}\n                              {player.rank === 2 && <Medal className=\"h-4 w-4\" />}\n                              {player.rank === 3 && <Award className=\"h-4 w-4\" />}\n                            </div>\n                          )}\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"flex items-center\">\n                          <div className=\"bg-primary/10 w-8 h-8 rounded-full flex items-center justify-center mr-3\">\n                            <span className=\"text-sm font-medium text-primary\">\n                              {player.username.slice(0, 2).toUpperCase()}\n                            </span>\n                          </div>\n                          <span className=\"font-medium text-foreground\">\n                            {player.username}\n                            {isCurrentUser && (\n                              <span className=\"text-xs bg-primary text-primary-foreground px-2 py-1 rounded-full ml-2\">\n                                You\n                              </span>\n                            )}\n                          </span>\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-foreground\">\n                        {player.totalScore.toLocaleString()}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                        {player.quizzesTaken}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                        {player.averageScore}%\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* User Position Highlight */}\n      {userEntry && userEntry.rank > 10 && (\n        <Card className=\"shadow-sm border-primary/20\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <span className=\"text-lg font-bold text-primary\">#{userEntry.rank}</span>\n                <span className=\"font-medium text-foreground\">Your Position</span>\n              </div>\n              <span className=\"text-sm text-muted-foreground\">\n                {userEntry.totalScore.toLocaleString()} points\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":8948},"client/src/components/profile/profile.tsx":{"content":"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { \n  Trophy, Star, Target, TrendingUp, Clock, Award, Settings, Palette, \n  Volume2, Bell, Shield, User, Moon, Sun, Monitor, Sparkles, Zap,\n  Crown, Medal, ChevronRight, Activity, Calendar, BarChart3,\n  Eye, EyeOff, Save, RefreshCw, Gamepad2, Globe, Lock\n} from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\nexport default function Profile() {\n  const [showSettings, setShowSettings] = useState(false);\n  const [theme, setTheme] = useState(\"system\");\n  const [soundEnabled, setSoundEnabled] = useState(true);\n  const [notificationsEnabled, setNotificationsEnabled] = useState(true);\n  const [animationsEnabled, setAnimationsEnabled] = useState(true);\n  const [privacyMode, setPrivacyMode] = useState(false);\n  const [language, setLanguage] = useState(\"en\");\n  const [autoSave, setAutoSave] = useState(true);\n  const [particlesEnabled, setParticlesEnabled] = useState(true);\n\n  const { data: profile } = useQuery({\n    queryKey: [\"/api/profile\"],\n  });\n\n  const { data: quizHistory } = useQuery({\n    queryKey: [\"/api/quiz-history\"],\n  });\n\n  // Apply theme changes\n  useEffect(() => {\n    const root = document.documentElement;\n    if (theme === \"dark\") {\n      root.classList.add(\"dark\");\n    } else if (theme === \"light\") {\n      root.classList.remove(\"dark\");\n    } else {\n      // System theme\n      const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n      if (mediaQuery.matches) {\n        root.classList.add(\"dark\");\n      } else {\n        root.classList.remove(\"dark\");\n      }\n    }\n  }, [theme]);\n\n  const applySettings = () => {\n    // Save settings to localStorage\n    const settings = {\n      theme,\n      soundEnabled,\n      notificationsEnabled,\n      animationsEnabled,\n      privacyMode,\n      language,\n      autoSave,\n      particlesEnabled\n    };\n    localStorage.setItem('userSettings', JSON.stringify(settings));\n    setShowSettings(false);\n    \n    // Show success notification\n    if (window.toast) {\n      window.toast({\n        title: \"Settings Applied! ✨\",\n        description: \"Your preferences have been saved successfully.\",\n      });\n    }\n  };\n\n  if (!profile) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-background via-background/95 to-primary/5 relative overflow-hidden\">\n        {/* Animated background particles */}\n        <div className=\"absolute inset-0 overflow-hidden\">\n          {[...Array(20)].map((_, i) => (\n            <div\n              key={i}\n              className=\"absolute animate-float opacity-20\"\n              style={{\n                left: `${Math.random() * 100}%`,\n                top: `${Math.random() * 100}%`,\n                animationDelay: `${Math.random() * 4}s`,\n                animationDuration: `${4 + Math.random() * 4}s`\n              }}\n            >\n              <Sparkles className=\"h-4 w-4 text-primary\" />\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"relative z-10 max-w-7xl mx-auto p-6 space-y-8\">\n          {/* Loading skeleton with glassmorphism */}\n          <div className=\"glass-morphism p-8 rounded-3xl border border-primary/20 backdrop-blur-xl\">\n            <div className=\"flex items-center space-x-6\">\n              <div className=\"w-24 h-24 bg-gradient-to-br from-primary/30 to-accent/30 rounded-full skeleton\"></div>\n              <div className=\"space-y-3\">\n                <div className=\"h-8 w-48 skeleton rounded-full\"></div>\n                <div className=\"h-4 w-32 skeleton rounded-full\"></div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"glass-morphism p-6 rounded-2xl border border-primary/10 skeleton h-40\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const stats = [\n    {\n      icon: Trophy,\n      label: \"Total Score\",\n      value: profile.totalScore?.toLocaleString() || \"0\",\n      color: \"text-yellow-400\",\n      bgGradient: \"from-yellow-500/20 to-amber-500/20\",\n      glowColor: \"shadow-yellow-500/20\",\n      particles: true\n    },\n    {\n      icon: Star,\n      label: \"Average Score\",\n      value: profile.averageScore ? `${profile.averageScore.toFixed(1)}%` : \"0%\",\n      color: \"text-blue-400\",\n      bgGradient: \"from-blue-500/20 to-cyan-500/20\",\n      glowColor: \"shadow-blue-500/20\",\n      particles: true\n    },\n    {\n      icon: Target,\n      label: \"Quizzes Taken\",\n      value: profile.totalQuizzes?.toString() || \"0\",\n      color: \"text-emerald-400\",\n      bgGradient: \"from-emerald-500/20 to-green-500/20\",\n      glowColor: \"shadow-emerald-500/20\",\n      particles: false\n    },\n    {\n      icon: TrendingUp,\n      label: \"Best Score\",\n      value: profile.bestScore ? `${profile.bestScore}%` : \"0%\",\n      color: \"text-purple-400\",\n      bgGradient: \"from-purple-500/20 to-pink-500/20\",\n      glowColor: \"shadow-purple-500/20\",\n      particles: true\n    },\n    {\n      icon: Clock,\n      label: \"Time Spent\",\n      value: profile.totalTimeSpent ? `${Math.round(profile.totalTimeSpent / 60)}h` : \"0h\",\n      color: \"text-orange-400\",\n      bgGradient: \"from-orange-500/20 to-red-500/20\",\n      glowColor: \"shadow-orange-500/20\",\n      particles: false\n    },\n    {\n      icon: Award,\n      label: \"Achievements\",\n      value: profile.achievements?.length?.toString() || \"0\",\n      color: \"text-rose-400\",\n      bgGradient: \"from-rose-500/20 to-pink-500/20\",\n      glowColor: \"shadow-rose-500/20\",\n      particles: true\n    },\n  ];\n\n  const recentQuizzes = quizHistory?.slice(0, 5) || [];\n\n  const getScoreColor = (score: number) => {\n    if (score >= 90) return \"text-emerald-400 bg-gradient-to-r from-emerald-500/20 to-green-500/20 border-emerald-500/30\";\n    if (score >= 80) return \"text-blue-400 bg-gradient-to-r from-blue-500/20 to-cyan-500/20 border-blue-500/30\";\n    if (score >= 70) return \"text-yellow-400 bg-gradient-to-r from-yellow-500/20 to-amber-500/20 border-yellow-500/30\";\n    if (score >= 60) return \"text-orange-400 bg-gradient-to-r from-orange-500/20 to-red-500/20 border-orange-500/30\";\n    return \"text-red-400 bg-gradient-to-r from-red-500/20 to-pink-500/20 border-red-500/30\";\n  };\n\n  const getRankIcon = (score: number) => {\n    if (score >= 95) return { icon: Crown, color: \"text-yellow-400\", gradient: \"from-yellow-400 to-amber-400\", glow: \"shadow-yellow-400/50\" };\n    if (score >= 90) return { icon: Trophy, color: \"text-yellow-400\", gradient: \"from-yellow-500 to-amber-500\", glow: \"shadow-yellow-500/40\" };\n    if (score >= 80) return { icon: Medal, color: \"text-gray-300\", gradient: \"from-gray-300 to-gray-400\", glow: \"shadow-gray-300/40\" };\n    if (score >= 70) return { icon: Award, color: \"text-amber-600\", gradient: \"from-amber-600 to-yellow-600\", glow: \"shadow-amber-600/40\" };\n    return { icon: Target, color: \"text-blue-400\", gradient: \"from-blue-400 to-cyan-400\", glow: \"shadow-blue-400/40\" };\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background/95 to-primary/5 relative overflow-hidden\">\n      {/* Animated background elements */}\n      {particlesEnabled && (\n        <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n          {/* Floating particles */}\n          {[...Array(30)].map((_, i) => (\n            <div\n              key={i}\n              className=\"absolute animate-float opacity-10\"\n              style={{\n                left: `${Math.random() * 100}%`,\n                top: `${Math.random() * 100}%`,\n                animationDelay: `${Math.random() * 8}s`,\n                animationDuration: `${6 + Math.random() * 6}s`\n              }}\n            >\n              <Sparkles className=\"h-3 w-3 text-primary rotate-45\" />\n            </div>\n          ))}\n          \n          {/* Gradient orbs */}\n          <div className=\"absolute top-20 left-20 w-72 h-72 bg-gradient-to-r from-primary/10 to-accent/10 rounded-full blur-3xl animate-pulse\"></div>\n          <div className=\"absolute bottom-20 right-20 w-96 h-96 bg-gradient-to-r from-accent/8 to-primary/8 rounded-full blur-3xl animate-pulse\" style={{ animationDelay: \"2s\" }}></div>\n        </div>\n      )}\n\n      <div className=\"relative z-10 max-w-7xl mx-auto space-y-8 p-6\">\n        {/* Enhanced Profile Header */}\n        <div className=\"glass-morphism p-8 rounded-3xl border border-primary/20 backdrop-blur-xl shadow-2xl\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-6\">\n              <div className=\"relative group\">\n                {/* Neon glow effect */}\n                <div className=\"absolute -inset-1 bg-gradient-to-r from-primary via-accent to-primary rounded-3xl blur opacity-30 group-hover:opacity-60 transition duration-1000 group-hover:duration-200 animate-pulse\"></div>\n                <div className=\"relative w-24 h-24 bg-gradient-to-br from-primary via-accent to-primary rounded-2xl flex items-center justify-center shadow-xl transform group-hover:scale-110 transition-all duration-300\">\n                  <User className=\"h-12 w-12 text-white drop-shadow-lg\" />\n                  {/* Status indicator */}\n                  <div className=\"absolute -bottom-1 -right-1 w-6 h-6 bg-gradient-to-r from-emerald-400 to-green-400 rounded-full flex items-center justify-center border-2 border-background\">\n                    <div className=\"w-2 h-2 bg-white rounded-full animate-pulse\"></div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <h1 className=\"text-5xl font-black bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent animate-gradient-x\">\n                  {profile.username}\n                </h1>\n                <div className=\"flex items-center space-x-3\">\n                  <Badge className=\"bg-gradient-to-r from-primary/20 to-accent/20 text-primary border-primary/30 px-4 py-1 text-sm font-semibold\">\n                    <Crown className=\"w-4 h-4 mr-1\" />\n                    Quiz Master\n                  </Badge>\n                  <Badge className=\"bg-gradient-to-r from-emerald-500/20 to-green-500/20 text-emerald-400 border-emerald-500/30 px-3 py-1\">\n                    <Activity className=\"w-3 h-3 mr-1\" />\n                    Online\n                  </Badge>\n                </div>\n              </div>\n            </div>\n            \n            {/* Settings Dialog Trigger */}\n            <Dialog open={showSettings} onOpenChange={setShowSettings}>\n              <DialogTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  size=\"lg\"\n                  className=\"relative group overflow-hidden bg-gradient-to-r from-primary/10 to-accent/10 border-2 border-primary/30 hover:border-primary/50 backdrop-blur-xl px-8 py-4 rounded-2xl font-bold text-lg transition-all duration-300 transform hover:scale-105 neon-glow\"\n                >\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-primary/20 via-transparent to-accent/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                  <Settings className=\"mr-3 h-6 w-6 group-hover:rotate-180 transition-transform duration-500\" />\n                  <span className=\"relative z-10\">Settings</span>\n                  <Sparkles className=\"ml-2 h-4 w-4 animate-sparkle\" />\n                </Button>\n              </DialogTrigger>\n              \n              <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto glass-morphism border-2 border-primary/30 backdrop-blur-xl\">\n                <DialogHeader>\n                  <DialogTitle className=\"text-3xl font-black bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent flex items-center\">\n                    <Settings className=\"mr-4 h-8 w-8 text-primary animate-spin\" style={{ animationDuration: \"3s\" }} />\n                    Advanced Settings & Preferences\n                  </DialogTitle>\n                </DialogHeader>\n                \n                <div className=\"space-y-8 p-2\">\n                  {/* Appearance Section */}\n                  <div className=\"glass-morphism p-6 rounded-2xl border border-primary/10\">\n                    <h3 className=\"text-2xl font-bold mb-6 flex items-center text-foreground\">\n                      <Palette className=\"mr-3 h-6 w-6 text-primary\" />\n                      Appearance & Theme\n                    </h3>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                      {[\n                        { id: \"light\", icon: Sun, label: \"Light Mode\", desc: \"Clean and bright\" },\n                        { id: \"dark\", icon: Moon, label: \"Dark Mode\", desc: \"Easy on the eyes\" },\n                        { id: \"system\", icon: Monitor, label: \"Auto\", desc: \"Follows system\" }\n                      ].map((themeOption) => {\n                        const Icon = themeOption.icon;\n                        return (\n                          <button\n                            key={themeOption.id}\n                            onClick={() => setTheme(themeOption.id)}\n                            className={`p-6 rounded-xl border-2 transition-all duration-300 transform hover:scale-105 ${\n                              theme === themeOption.id \n                                ? 'bg-gradient-to-br from-primary/20 to-accent/20 border-primary/50 shadow-lg shadow-primary/20' \n                                : 'glass-effect border-border/50 hover:border-primary/30'\n                            }`}\n                          >\n                            <Icon className={`h-8 w-8 mx-auto mb-3 ${theme === themeOption.id ? 'text-primary' : 'text-muted-foreground'}`} />\n                            <h4 className=\"font-semibold text-lg\">{themeOption.label}</h4>\n                            <p className=\"text-sm text-muted-foreground\">{themeOption.desc}</p>\n                          </button>\n                        );\n                      })}\n                    </div>\n                  </div>\n\n                  {/* Experience Section */}\n                  <div className=\"glass-morphism p-6 rounded-2xl border border-primary/10\">\n                    <h3 className=\"text-2xl font-bold mb-6 flex items-center text-foreground\">\n                      <Zap className=\"mr-3 h-6 w-6 text-accent\" />\n                      Experience & Effects\n                    </h3>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      {[\n                        { \n                          icon: Volume2, \n                          label: \"Sound Effects\", \n                          desc: \"Audio feedback for interactions\",\n                          checked: soundEnabled, \n                          onChange: setSoundEnabled \n                        },\n                        { \n                          icon: Sparkles, \n                          label: \"Animations\", \n                          desc: \"Smooth transitions and effects\",\n                          checked: animationsEnabled, \n                          onChange: setAnimationsEnabled \n                        },\n                        { \n                          icon: Eye, \n                          label: \"Particle Effects\", \n                          desc: \"Background animated particles\",\n                          checked: particlesEnabled, \n                          onChange: setParticlesEnabled \n                        },\n                        { \n                          icon: Save, \n                          label: \"Auto Save\", \n                          desc: \"Automatically save progress\",\n                          checked: autoSave, \n                          onChange: setAutoSave \n                        }\n                      ].map((setting, i) => {\n                        const Icon = setting.icon;\n                        return (\n                          <div key={i} className=\"glass-effect p-4 rounded-xl border border-primary/10 hover:border-primary/20 transition-all duration-300 group\">\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center space-x-3\">\n                                <div className=\"p-2 rounded-lg bg-gradient-to-br from-primary/20 to-accent/20\">\n                                  <Icon className=\"h-5 w-5 text-primary\" />\n                                </div>\n                                <div>\n                                  <span className=\"font-semibold text-foreground\">{setting.label}</span>\n                                  <p className=\"text-sm text-muted-foreground\">{setting.desc}</p>\n                                </div>\n                              </div>\n                              <Switch \n                                checked={setting.checked} \n                                onCheckedChange={setting.onChange}\n                                className=\"data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-primary data-[state=checked]:to-accent\"\n                              />\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n\n                  {/* Privacy & Security */}\n                  <div className=\"glass-morphism p-6 rounded-2xl border border-primary/10\">\n                    <h3 className=\"text-2xl font-bold mb-6 flex items-center text-foreground\">\n                      <Shield className=\"mr-3 h-6 w-6 text-green-400\" />\n                      Privacy & Security\n                    </h3>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      {[\n                        { \n                          icon: Bell, \n                          label: \"Push Notifications\", \n                          desc: \"Get notified about updates\",\n                          checked: notificationsEnabled, \n                          onChange: setNotificationsEnabled \n                        },\n                        { \n                          icon: privacyMode ? EyeOff : Eye, \n                          label: \"Privacy Mode\", \n                          desc: \"Hide personal information\",\n                          checked: privacyMode, \n                          onChange: setPrivacyMode \n                        }\n                      ].map((setting, i) => {\n                        const Icon = setting.icon;\n                        return (\n                          <div key={i} className=\"glass-effect p-4 rounded-xl border border-primary/10 hover:border-primary/20 transition-all duration-300\">\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center space-x-3\">\n                                <div className=\"p-2 rounded-lg bg-gradient-to-br from-green-500/20 to-emerald-500/20\">\n                                  <Icon className=\"h-5 w-5 text-green-400\" />\n                                </div>\n                                <div>\n                                  <span className=\"font-semibold text-foreground\">{setting.label}</span>\n                                  <p className=\"text-sm text-muted-foreground\">{setting.desc}</p>\n                                </div>\n                              </div>\n                              <Switch \n                                checked={setting.checked} \n                                onCheckedChange={setting.onChange}\n                                className=\"data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-green-400 data-[state=checked]:to-emerald-400\"\n                              />\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                    \n                    {/* Language Selection */}\n                    <div className=\"mt-6 glass-effect p-4 rounded-xl border border-primary/10\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"p-2 rounded-lg bg-gradient-to-br from-blue-500/20 to-cyan-500/20\">\n                            <Globe className=\"h-5 w-5 text-blue-400\" />\n                          </div>\n                          <div>\n                            <span className=\"font-semibold text-foreground\">Language</span>\n                            <p className=\"text-sm text-muted-foreground\">Choose your preferred language</p>\n                          </div>\n                        </div>\n                        <Select value={language} onValueChange={setLanguage}>\n                          <SelectTrigger className=\"w-40 bg-gradient-to-r from-primary/10 to-accent/10 border-primary/20\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent className=\"glass-morphism border border-primary/20\">\n                            <SelectItem value=\"en\">English</SelectItem>\n                            <SelectItem value=\"es\">Español</SelectItem>\n                            <SelectItem value=\"fr\">Français</SelectItem>\n                            <SelectItem value=\"de\">Deutsch</SelectItem>\n                            <SelectItem value=\"zh\">中文</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Apply Settings Button */}\n                  <div className=\"flex justify-end space-x-4\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setShowSettings(false)}\n                      className=\"px-8 py-3 rounded-xl font-semibold\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      onClick={applySettings}\n                      className=\"relative group overflow-hidden bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white font-bold px-8 py-3 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105\"\n                    >\n                      <div className=\"absolute inset-0 bg-white/20 transform -skew-x-12 -translate-x-full group-hover:translate-x-full transition-transform duration-700 ease-out\"></div>\n                      <div className=\"relative flex items-center\">\n                        <Save className=\"mr-2 h-5 w-5\" />\n                        Apply Settings\n                        <Sparkles className=\"ml-2 h-4 w-4 animate-sparkle\" />\n                      </div>\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {/* Enhanced Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {stats.map((stat, index) => {\n            const Icon = stat.icon;\n            return (\n              <div key={index} className=\"group slide-in\" style={{ animationDelay: `${index * 0.1}s` }}>\n                <div className={`relative glass-morphism p-8 rounded-2xl border border-primary/20 backdrop-blur-xl transform transition-all duration-500 hover:scale-105 hover:rotate-1 ${stat.glowColor} hover:shadow-2xl`}>\n                  {/* Neon border effect */}\n                  <div className={`absolute -inset-0.5 bg-gradient-to-r ${stat.bgGradient} rounded-2xl blur opacity-20 group-hover:opacity-40 transition duration-300`}></div>\n                  \n                  {/* Floating particles for certain stats */}\n                  {stat.particles && particlesEnabled && (\n                    <div className=\"absolute inset-0 overflow-hidden rounded-2xl\">\n                      {[...Array(5)].map((_, i) => (\n                        <div\n                          key={i}\n                          className=\"absolute animate-float opacity-30\"\n                          style={{\n                            left: `${20 + Math.random() * 60}%`,\n                            top: `${20 + Math.random() * 60}%`,\n                            animationDelay: `${Math.random() * 3}s`,\n                            animationDuration: `${3 + Math.random() * 2}s`\n                          }}\n                        >\n                          <Sparkles className=\"h-2 w-2 text-primary\" />\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                  \n                  <div className=\"relative z-10\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className={`p-4 rounded-2xl bg-gradient-to-br ${stat.bgGradient} backdrop-blur-sm border border-primary/20`}>\n                        <Icon className={`h-8 w-8 ${stat.color} drop-shadow-lg`} />\n                      </div>\n                      <ChevronRight className=\"h-6 w-6 text-muted-foreground group-hover:text-primary transition-colors\" />\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <p className=\"text-sm font-bold text-muted-foreground uppercase tracking-wider\">\n                        {stat.label}\n                      </p>\n                      <p className={`text-4xl font-black ${stat.color} drop-shadow-lg`}>\n                        {stat.value}\n                      </p>\n                      \n                      {/* Progress indicator for certain stats */}\n                      {(stat.label.includes(\"Score\") || stat.label.includes(\"Time\")) && (\n                        <div className=\"w-full bg-muted/30 rounded-full h-2 mt-3 overflow-hidden\">\n                          <div \n                            className={`h-full bg-gradient-to-r ${stat.bgGradient} rounded-full transition-all duration-1000 shadow-sm`}\n                            style={{ width: `${Math.min(100, parseInt(stat.value) || 30)}%` }}\n                          ></div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Enhanced Recent Activity */}\n        <div className=\"glass-morphism p-8 rounded-3xl border border-primary/20 backdrop-blur-xl shadow-2xl\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <h2 className=\"text-3xl font-black bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent flex items-center\">\n              <Activity className=\"mr-4 h-8 w-8 text-primary\" />\n              Recent Activity\n            </h2>\n            <Badge className=\"bg-gradient-to-r from-primary/20 to-accent/20 text-primary border-primary/30 px-4 py-2 font-semibold\">\n              <Calendar className=\"w-4 h-4 mr-2\" />\n              Last 30 days\n            </Badge>\n          </div>\n          \n          <div className=\"space-y-6\">\n            {recentQuizzes.length > 0 ? (\n              recentQuizzes.map((quiz: any, index: number) => {\n                const rankIcon = getRankIcon(quiz.score);\n                const RankIcon = rankIcon.icon;\n                return (\n                  <div \n                    key={quiz.id} \n                    className=\"group slide-in\" \n                    style={{ animationDelay: `${index * 0.1}s` }}\n                  >\n                    <div className=\"relative glass-morphism p-6 rounded-2xl border border-primary/10 hover:border-primary/30 transition-all duration-300 transform hover:scale-[1.02] hover:shadow-xl overflow-hidden\">\n                      {/* Animated background gradient */}\n                      <div className=\"absolute inset-0 bg-gradient-to-r from-primary/5 via-transparent to-accent/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n                      \n                      {/* Rank glow effect */}\n                      <div className={`absolute -top-2 -left-2 w-20 h-20 bg-gradient-to-br ${rankIcon.gradient} rounded-full blur-xl opacity-20 group-hover:opacity-40 transition-opacity duration-300`}></div>\n                      \n                      <div className=\"relative z-10 flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-6\">\n                          {/* Enhanced rank icon with glow */}\n                          <div className=\"relative\">\n                            <div className={`absolute inset-0 bg-gradient-to-r ${rankIcon.gradient} rounded-2xl blur opacity-40`}></div>\n                            <div className={`relative p-4 rounded-2xl bg-gradient-to-br from-background/50 to-card/50 backdrop-blur-sm border-2 border-primary/20 ${rankIcon.glow} shadow-lg`}>\n                              <RankIcon className={`h-8 w-8 ${rankIcon.color} drop-shadow-lg`} />\n                            </div>\n                          </div>\n                          \n                          <div className=\"space-y-1\">\n                            <h3 className=\"font-bold text-xl text-foreground group-hover:text-primary transition-colors duration-300\">\n                              {quiz.category}\n                            </h3>\n                            <div className=\"flex items-center space-x-4 text-muted-foreground\">\n                              <span className=\"flex items-center\">\n                                <Calendar className=\"w-4 h-4 mr-1\" />\n                                {new Date(quiz.createdAt).toLocaleDateString()}\n                              </span>\n                              <span className=\"flex items-center\">\n                                <BarChart3 className=\"w-4 h-4 mr-1\" />\n                                {quiz.questions?.length || 0} questions\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-4\">\n                          {/* Enhanced score badge */}\n                          <div className=\"relative\">\n                            <div className=\"absolute inset-0 bg-gradient-to-r from-primary/20 to-accent/20 rounded-2xl blur\"></div>\n                            <Badge className={`relative px-6 py-3 text-xl font-black border-2 rounded-2xl ${getScoreColor(quiz.score)} shadow-lg backdrop-blur-sm`}>\n                              {quiz.score}%\n                            </Badge>\n                          </div>\n                          \n                          <Badge className=\"bg-gradient-to-r from-primary/10 to-accent/10 text-primary border-primary/30 px-4 py-2 rounded-xl font-semibold\">\n                            <Sparkles className=\"w-4 h-4 mr-1\" />\n                            +{quiz.pointsEarned}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })\n            ) : (\n              <div className=\"text-center py-16\">\n                <div className=\"relative mb-8\">\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-primary/20 to-accent/20 rounded-full blur-2xl\"></div>\n                  <div className=\"relative p-8 rounded-full bg-gradient-to-br from-primary/10 to-accent/10 border border-primary/20 w-32 h-32 mx-auto flex items-center justify-center\">\n                    <Gamepad2 className=\"h-16 w-16 text-primary/60\" />\n                  </div>\n                </div>\n                <h3 className=\"text-2xl font-bold text-foreground mb-3\">Ready for your first challenge?</h3>\n                <p className=\"text-lg text-muted-foreground mb-6\">Start your quiz journey and see your progress here!</p>\n                <Button className=\"bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 text-white font-bold px-8 py-3 rounded-xl shadow-lg transform hover:scale-105 transition-all duration-300\">\n                  <Trophy className=\"mr-2 h-5 w-5\" />\n                  Take Your First Quiz\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Achievement Showcase */}\n        {profile.achievements && profile.achievements.length > 0 && (\n          <div className=\"glass-morphism p-8 rounded-3xl border border-primary/20 backdrop-blur-xl shadow-2xl\">\n            <h2 className=\"text-3xl font-black bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent flex items-center mb-8\">\n              <Award className=\"mr-4 h-8 w-8 text-primary\" />\n              Achievements & Badges\n            </h2>\n            \n            <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-6\">\n              {profile.achievements.map((achievement: any, index: number) => (\n                <div key={index} className=\"group slide-in\" style={{ animationDelay: `${index * 0.05}s` }}>\n                  <div className=\"relative glass-morphism p-6 rounded-2xl border border-primary/10 hover:border-primary/30 transition-all duration-300 transform hover:scale-110 hover:rotate-3\">\n                    <div className=\"absolute inset-0 bg-gradient-to-br from-primary/10 to-accent/10 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                    <div className=\"relative z-10 text-center\">\n                      <Trophy className=\"h-8 w-8 text-yellow-400 mx-auto mb-2\" />\n                      <p className=\"text-sm font-semibold text-foreground\">{achievement.name}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":34704},"client/src/components/quiz/active-quiz.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuizState } from \"@/hooks/use-quiz-state\";\nimport { ChevronLeft, ChevronRight, Clock } from \"lucide-react\";\nimport type { QuizQuestion } from \"@shared/schema\";\n\ninterface ActiveQuizProps {\n  quiz: any;\n  onQuizComplete: (results: any) => void;\n}\n\nexport default function ActiveQuiz({ quiz, onQuizComplete }: ActiveQuizProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { \n    quizState, \n    updateAnswer, \n    setTimeRemaining, \n    setQuizResults,\n    setIsQuizActive \n  } = useQuizState();\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n\n  const submitQuizMutation = useMutation({\n    mutationFn: async (answers: number[]) => {\n      // Calculate time spent in seconds with proper null checks\n      const totalTime = 20 * 60; // Always 20 minutes (1200 seconds)\n      const remainingTime = quizState.timeRemaining || 0;\n      const timeSpent = Math.max(1, totalTime - remainingTime); // Ensure positive number, minimum 1 second\n\n      const res = await apiRequest(\"POST\", \"/api/quiz/submit\", {\n        quizId: quiz.id,\n        answers: answers || [],\n        timeSpent: timeSpent || 1, // Ensure timeSpent is never null/undefined\n      });\n      return await res.json();\n    },\n    onSuccess: (results) => {\n      setQuizResults(results);\n      setIsQuizActive(false);\n      onQuizComplete(results);\n      queryClient.invalidateQueries({ queryKey: [\"/api/profile\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/leaderboard\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to submit quiz\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmitQuiz = () => {\n    if (submitQuizMutation.isPending) return;\n    submitQuizMutation.mutate(quizState.currentAnswers);\n  };\n\n  // Initialize timer\n  useEffect(() => {\n    if (!quiz || !quizState.isQuizActive) return;\n\n    // Initialize timer if not set - always 20 minutes (1200 seconds)\n    if (quizState.timeRemaining <= 0) {\n      const timeLimit = 20 * 60; // 20 minutes in seconds\n      setTimeRemaining(timeLimit);\n    }\n  }, [quiz, setTimeRemaining, quizState.isQuizActive]);\n\n  // Timer countdown\n  useEffect(() => {\n    // Clear any existing timer\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n\n    // Only start timer if quiz is active and has time remaining\n    if (!quizState.isQuizActive || quizState.timeRemaining <= 0) {\n      return;\n    }\n\n    timerRef.current = setInterval(() => {\n      setTimeRemaining((prev: number) => {\n        const currentTime = prev || 0;\n        const newTime = Math.max(0, currentTime - 1);\n        if (newTime <= 0) {\n          // Clear timer before submitting\n          if (timerRef.current) {\n            clearInterval(timerRef.current);\n            timerRef.current = null;\n          }\n          // Submit quiz when time runs out\n          setTimeout(() => handleSubmitQuiz(), 100);\n          return 0;\n        }\n        return newTime;\n      });\n    }, 1000);\n\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n    };\n  }, [quizState.isQuizActive, quizState.timeRemaining]);\n\n  const handleAnswerSelect = (answerIndex: number) => {\n    updateAnswer(currentQuestionIndex, answerIndex);\n  };\n\n  const handleNextQuestion = () => {\n    if (currentQuestionIndex < quiz.questions.length - 1) {\n      setCurrentQuestionIndex(prev => prev + 1);\n    }\n  };\n\n  const handlePreviousQuestion = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(prev => prev - 1);\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    // Handle null, undefined, or invalid numbers\n    const validSeconds = isNaN(seconds) || seconds == null ? 0 : Math.max(0, Math.floor(seconds));\n    const mins = Math.floor(validSeconds / 60);\n    const secs = validSeconds % 60;\n    return `${mins}:${secs.toString().padStart(2, \"0\")}`;\n  };\n\n  if (!quiz || !quiz.questions || quiz.questions.length === 0) {\n    return (\n      <div className=\"max-w-4xl mx-auto text-center py-12\">\n        <p className=\"text-muted-foreground\">Loading quiz...</p>\n      </div>\n    );\n  }\n\n  const currentQuestion = quiz.questions[currentQuestionIndex];\n  const progress = ((currentQuestionIndex + 1) / quiz.questions.length) * 100;\n  const answeredQuestions = quizState.currentAnswers.filter(answer => answer !== -1).length;\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      {/* Quiz Header */}\n      <Card className=\"shadow-sm\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-xl font-semibold text-foreground\" data-testid=\"quiz-title\">\n              {quiz.title}\n            </h2>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"text-sm text-muted-foreground\">\n                Question <span data-testid=\"current-question\">{currentQuestionIndex + 1}</span> of{\" \"}\n                <span data-testid=\"total-questions\">{quiz.questions.length}</span>\n              </div>\n              <div className={`flex items-center space-x-2 text-sm px-3 py-2 rounded-lg font-medium transition-all duration-200 ${\n                quizState.timeRemaining <= 60 \n                  ? \"bg-destructive/10 text-destructive animate-pulse\" \n                  : quizState.timeRemaining <= 300 \n                    ? \"bg-orange-500/10 text-orange-500\" \n                    : \"bg-primary/10 text-primary\"\n              }`}>\n                <Clock className=\"h-4 w-4\" />\n                <span data-testid=\"timer\" className=\"font-mono text-base\">\n                  {formatTime(quizState.timeRemaining)}\n                </span>\n              </div>\n            </div>\n          </div>\n\n          <Progress value={progress} className=\"h-2\" data-testid=\"quiz-progress\" />\n        </CardContent>\n      </Card>\n\n      {/* Quiz Question */}\n      <Card className=\"shadow-sm\">\n        <CardContent className=\"p-8\">\n          <h3 className=\"text-xl font-medium text-foreground mb-6\" data-testid=\"question-text\">\n            {currentQuestion.question}\n          </h3>\n\n          <div className=\"space-y-3\">\n            {currentQuestion.options.map((option: string, index: number) => (\n              <button\n                key={index}\n                onClick={() => handleAnswerSelect(index)}\n                className={`w-full text-left p-4 rounded-lg border-2 transition-all duration-200 ${\n                  quizState.currentAnswers[currentQuestionIndex] === index\n                    ? \"border-primary bg-primary/5 text-primary font-medium\"\n                    : \"border-border hover:border-primary/50 hover:bg-accent/50\"\n                }`}\n                data-testid={`option-${index}`}\n              >\n                <span className=\"font-medium mr-3\">\n                  {String.fromCharCode(65 + index)}.\n                </span>\n                {option}\n              </button>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Navigation */}\n      <div className=\"flex items-center justify-between\">\n        <Button\n          variant=\"outline\"\n          onClick={handlePreviousQuestion}\n          disabled={currentQuestionIndex === 0}\n        >\n          <ChevronLeft className=\"h-4 w-4 mr-2\" />\n          Previous\n        </Button>\n\n        <div className=\"text-sm text-muted-foreground\">\n          {answeredQuestions} of {quiz.questions.length} answered\n        </div>\n\n        {currentQuestionIndex === quiz.questions.length - 1 ? (\n          <Button\n            onClick={handleSubmitQuiz}\n            disabled={submitQuizMutation.isPending}\n            className=\"min-w-[120px]\"\n          >\n            {submitQuizMutation.isPending ? \"Submitting...\" : \"Submit Quiz\"}\n          </Button>\n        ) : (\n          <Button onClick={handleNextQuestion}>\n            Next\n            <ChevronRight className=\"h-4 w-4 ml-2\" />\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":8621},"client/src/components/quiz/quiz-results.tsx":{"content":"\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, XCircle, RotateCcw, Users, RefreshCw, Trophy, Medal, Award, Star, TrendingUp, Clock, Target, Lightbulb, AlertCircle } from \"lucide-react\";\nimport { useQuizState } from \"@/hooks/use-quiz-state\";\nimport { useState } from \"react\";\n\ninterface QuizResultsProps {\n  results: {\n    id: string;\n    score: number;\n    pointsEarned: number;\n    correctAnswers: any[];\n  };\n  onTakeAnother: () => void;\n  onViewLeaderboard: () => void;\n}\n\nexport default function QuizResults({ results, onTakeAnother, onViewLeaderboard }: QuizResultsProps) {\n  const { score, pointsEarned, correctAnswers } = results;\n  const { quizState, setCurrentQuiz } = useQuizState();\n  const [showAllQuestions, setShowAllQuestions] = useState(false);\n  const totalQuestions = correctAnswers.length;\n  const correctCount = Math.round((score / 100) * totalQuestions);\n  const percentage = Math.round(score);\n\n  const getScoreColor = (score: number) => {\n    if (score >= 90) return \"text-emerald-500\";\n    if (score >= 80) return \"text-blue-500\";\n    if (score >= 70) return \"text-yellow-500\";\n    if (score >= 60) return \"text-orange-500\";\n    return \"text-red-500\";\n  };\n\n  const getRankDisplay = (score: number) => {\n    if (score >= 90) {\n      return {\n        icon: <div className=\"relative\">\n          <Trophy className=\"h-12 w-12 text-yellow-500 animate-bounce\" />\n          <div className=\"absolute -top-2 -right-2 bg-gradient-to-r from-yellow-400 to-yellow-600 rounded-full p-1\">\n            <span className=\"text-white text-xs font-bold\">1st</span>\n          </div>\n        </div>,\n        title: \"Gold Medal\",\n        subtitle: \"Outstanding Performance!\",\n        gradient: \"from-yellow-400 via-yellow-500 to-yellow-600\"\n      };\n    }\n    if (score >= 80) {\n      return {\n        icon: <div className=\"relative\">\n          <Medal className=\"h-12 w-12 text-gray-400 animate-pulse\" />\n          <div className=\"absolute -top-2 -right-2 bg-gradient-to-r from-gray-400 to-gray-600 rounded-full p-1\">\n            <span className=\"text-white text-xs font-bold\">2nd</span>\n          </div>\n        </div>,\n        title: \"Silver Medal\",\n        subtitle: \"Excellent Work!\",\n        gradient: \"from-gray-400 via-gray-500 to-gray-600\"\n      };\n    }\n    if (score >= 70) {\n      return {\n        icon: <div className=\"relative\">\n          <Award className=\"h-12 w-12 text-amber-600 animate-pulse\" />\n          <div className=\"absolute -top-2 -right-2 bg-gradient-to-r from-amber-600 to-amber-800 rounded-full p-1\">\n            <span className=\"text-white text-xs font-bold\">3rd</span>\n          </div>\n        </div>,\n        title: \"Bronze Medal\",\n        subtitle: \"Good Job!\",\n        gradient: \"from-amber-600 via-amber-700 to-amber-800\"\n      };\n    }\n    return {\n      icon: <div className=\"relative\">\n        <div className=\"h-12 w-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center\">\n          <span className=\"text-white font-bold text-lg\">{Math.floor(score/10)}</span>\n        </div>\n      </div>,\n      title: \"Keep Improving\",\n      subtitle: \"You can do better!\",\n      gradient: \"from-blue-500 to-purple-600\"\n    };\n  };\n\n  const rankDisplay = getRankDisplay(percentage);\n\n  const handleRetakeTest = () => {\n    if (quizState.currentQuiz) {\n      setCurrentQuiz(quizState.currentQuiz);\n    }\n  };\n\n  const questionsToShow = showAllQuestions ? correctAnswers : correctAnswers.slice(0, 3);\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-8 p-6\">\n      {/* Animated Results Header */}\n      <div className=\"relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-primary/20 via-accent/20 to-primary/20 animate-pulse\"></div>\n        <Card className=\"relative modern-card border-2 border-primary/30 shadow-2xl\">\n          <CardContent className=\"p-12 text-center relative\">\n            {/* Floating particles effect */}\n            <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n              <div className=\"absolute top-10 left-10 w-2 h-2 bg-primary rounded-full animate-ping\"></div>\n              <div className=\"absolute top-20 right-20 w-1 h-1 bg-accent rounded-full animate-ping delay-1000\"></div>\n              <div className=\"absolute bottom-10 left-20 w-1.5 h-1.5 bg-primary rounded-full animate-ping delay-500\"></div>\n              <div className=\"absolute bottom-20 right-10 w-1 h-1 bg-accent rounded-full animate-ping delay-1500\"></div>\n            </div>\n\n            {/* Achievement Icon */}\n            <div className=\"flex justify-center mb-8\">\n              <div className={`p-8 bg-gradient-to-br ${rankDisplay.gradient} rounded-3xl border-4 border-white/20 shadow-2xl transform hover:scale-110 transition-all duration-500 float`}>\n                {rankDisplay.icon}\n              </div>\n            </div>\n\n            <div className=\"space-y-4 mb-10\">\n              <h2 className=\"text-5xl font-bold gradient-text mb-4\">Quiz Complete!</h2>\n              <h3 className={`text-2xl font-semibold bg-gradient-to-r ${rankDisplay.gradient} bg-clip-text text-transparent`}>\n                {rankDisplay.title}\n              </h3>\n              <p className=\"text-lg text-muted-foreground\">{rankDisplay.subtitle}</p>\n            </div>\n\n            {/* Enhanced Score Display */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-12\">\n              <div className=\"group\">\n                <div className=\"glass-effect p-8 rounded-2xl border-2 border-primary/20 hover:border-primary/40 transition-all duration-300 transform group-hover:scale-105 group-hover:shadow-2xl\">\n                  <div className=\"flex items-center justify-center mb-4\">\n                    <TrendingUp className=\"h-8 w-8 text-primary mr-3\" />\n                    <div className={`text-6xl font-black ${getScoreColor(percentage)} animate-pulse`}>\n                      {percentage}%\n                    </div>\n                  </div>\n                  <p className=\"text-lg font-semibold text-muted-foreground\">Overall Score</p>\n                  <div className=\"mt-3 h-2 bg-muted rounded-full overflow-hidden\">\n                    <div \n                      className={`h-full bg-gradient-to-r ${getScoreColor(percentage).replace('text-', 'from-')} to-primary transition-all duration-1000 ease-out`}\n                      style={{ width: `${percentage}%` }}\n                    ></div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"group\">\n                <div className=\"glass-effect p-8 rounded-2xl border-2 border-amber-500/20 hover:border-amber-500/40 transition-all duration-300 transform group-hover:scale-105 group-hover:shadow-2xl\">\n                  <div className=\"flex items-center justify-center mb-4\">\n                    <Star className=\"h-8 w-8 text-amber-500 mr-3 animate-spin\" />\n                    <span className=\"text-6xl font-black text-amber-500 animate-bounce\">{pointsEarned}</span>\n                  </div>\n                  <p className=\"text-lg font-semibold text-muted-foreground\">Points Earned</p>\n                  <div className=\"mt-3 flex justify-center space-x-1\">\n                    {[...Array(5)].map((_, i) => (\n                      <Star \n                        key={i} \n                        className={`h-4 w-4 ${i < Math.floor(pointsEarned/20) ? 'text-amber-500 fill-current' : 'text-muted-foreground'} transition-colors duration-300`}\n                      />\n                    ))}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"group\">\n                <div className=\"glass-effect p-8 rounded-2xl border-2 border-emerald-500/20 hover:border-emerald-500/40 transition-all duration-300 transform group-hover:scale-105 group-hover:shadow-2xl\">\n                  <div className=\"flex items-center justify-center mb-4\">\n                    <Target className=\"h-8 w-8 text-emerald-500 mr-3\" />\n                    <span className=\"text-6xl font-black text-emerald-500\">{correctCount}</span>\n                    <span className=\"text-3xl font-semibold text-muted-foreground ml-2\">/{totalQuestions}</span>\n                  </div>\n                  <p className=\"text-lg font-semibold text-muted-foreground\">Correct Answers</p>\n                  <div className=\"mt-3 grid grid-cols-10 gap-1\">\n                    {[...Array(totalQuestions)].map((_, i) => (\n                      <div \n                        key={i} \n                        className={`h-2 rounded-full transition-colors duration-300 delay-${i * 100} ${\n                          i < correctCount ? 'bg-emerald-500' : 'bg-muted'\n                        }`}\n                      ></div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Enhanced Action Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-6 justify-center\">\n              <Button \n                onClick={handleRetakeTest}\n                size=\"lg\"\n                className=\"bg-gradient-to-r from-primary via-accent to-primary hover:from-primary/90 hover:via-accent/90 hover:to-primary/90 text-white font-bold py-4 px-8 rounded-2xl transition-all duration-500 transform hover:scale-110 hover:shadow-2xl pulse-glow text-lg\"\n              >\n                <RefreshCw className=\"mr-3 h-6 w-6\" />\n                Retake Test\n              </Button>\n              <Button \n                onClick={onTakeAnother}\n                variant=\"outline\"\n                size=\"lg\"\n                className=\"border-3 border-primary/30 hover:border-primary/60 bg-glass-effect backdrop-blur-md py-4 px-8 rounded-2xl transition-all duration-500 transform hover:scale-110 hover:shadow-2xl text-lg font-semibold\"\n              >\n                <RotateCcw className=\"mr-3 h-6 w-6\" />\n                New Quiz\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={onViewLeaderboard}\n                size=\"lg\"\n                className=\"border-3 border-accent/30 hover:border-accent/60 bg-glass-effect backdrop-blur-md py-4 px-8 rounded-2xl transition-all duration-500 transform hover:scale-110 hover:shadow-2xl text-lg font-semibold\"\n              >\n                <Users className=\"mr-3 h-6 w-6\" />\n                Leaderboard\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Completely Redesigned Question Review */}\n      <Card className=\"modern-card border-2 border-primary/20 shadow-xl\">\n        <CardContent className=\"p-8\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-gradient-to-br from-primary/20 to-accent/20 rounded-2xl\">\n                <Lightbulb className=\"h-8 w-8 text-primary\" />\n              </div>\n              <div>\n                <h3 className=\"text-3xl font-bold gradient-text\">Question Review</h3>\n                <p className=\"text-muted-foreground text-lg\">Detailed breakdown of your performance</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Badge variant=\"outline\" className=\"bg-emerald-500/10 text-emerald-600 border-emerald-500/30 px-4 py-2 text-lg\">\n                {correctCount} Correct\n              </Badge>\n              <Badge variant=\"outline\" className=\"bg-red-500/10 text-red-600 border-red-500/30 px-4 py-2 text-lg\">\n                {totalQuestions - correctCount} Incorrect\n              </Badge>\n            </div>\n          </div>\n\n          <div className=\"space-y-6\">\n            {questionsToShow.map((question, index) => (\n              <div key={index} className=\"group\">\n                <div className={`glass-effect p-8 rounded-2xl border-2 transition-all duration-500 transform hover:scale-[1.02] hover:shadow-2xl ${\n                  question.isCorrect \n                    ? 'border-emerald-500/30 hover:border-emerald-500/50 bg-emerald-500/5' \n                    : 'border-red-500/30 hover:border-red-500/50 bg-red-500/5'\n                }`}>\n                  \n                  {/* Question Header */}\n                  <div className=\"flex items-start space-x-6 mb-6\">\n                    <div className=\"flex-shrink-0\">\n                      <div className={`p-4 rounded-2xl ${\n                        question.isCorrect \n                          ? 'bg-gradient-to-br from-emerald-500/20 to-emerald-600/20 border-2 border-emerald-500/30' \n                          : 'bg-gradient-to-br from-red-500/20 to-red-600/20 border-2 border-red-500/30'\n                      }`}>\n                        {question.isCorrect ? (\n                          <CheckCircle className=\"h-8 w-8 text-emerald-500\" />\n                        ) : (\n                          <XCircle className=\"h-8 w-8 text-red-500\" />\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"flex-1 space-y-4\">\n                      <div className=\"flex items-center space-x-4\">\n                        <Badge variant=\"outline\" className=\"bg-primary/10 text-primary border-primary/30 px-4 py-2 text-lg font-semibold\">\n                          Question {index + 1}\n                        </Badge>\n                        <Badge \n                          variant={question.isCorrect ? \"default\" : \"destructive\"}\n                          className={`px-4 py-2 text-lg font-semibold ${\n                            question.isCorrect \n                              ? 'bg-emerald-500 hover:bg-emerald-600' \n                              : 'bg-red-500 hover:bg-red-600'\n                          }`}\n                        >\n                          {question.isCorrect ? \"✓ Correct\" : \"✗ Incorrect\"}\n                        </Badge>\n                      </div>\n\n                      <h4 className=\"text-xl font-bold text-foreground leading-relaxed\">\n                        {question.question}\n                      </h4>\n                    </div>\n                  </div>\n\n                  {/* Answer Options Grid */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n                    {question.options?.map((option: string, optionIndex: number) => {\n                      const isUserAnswer = question.userAnswer === option;\n                      const isCorrectAnswer = question.correctAnswer === option;\n                      \n                      return (\n                        <div key={optionIndex} className={`p-4 rounded-xl border-2 transition-all duration-300 ${\n                          isCorrectAnswer \n                            ? 'bg-emerald-500/10 border-emerald-500/40 text-emerald-700' \n                            : isUserAnswer && !question.isCorrect\n                              ? 'bg-red-500/10 border-red-500/40 text-red-700'\n                              : 'bg-muted/30 border-muted/50'\n                        }`}>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${\n                              isCorrectAnswer \n                                ? 'bg-emerald-500 text-white' \n                                : isUserAnswer && !question.isCorrect\n                                  ? 'bg-red-500 text-white'\n                                  : 'bg-muted text-muted-foreground'\n                            }`}>\n                              {String.fromCharCode(65 + optionIndex)}\n                            </div>\n                            <span className=\"font-medium\">{option}</span>\n                            <div className=\"ml-auto flex space-x-2\">\n                              {isCorrectAnswer && <CheckCircle className=\"h-5 w-5 text-emerald-500\" />}\n                              {isUserAnswer && !isCorrectAnswer && <XCircle className=\"h-5 w-5 text-red-500\" />}\n                              {isUserAnswer && <Badge variant=\"outline\" className=\"text-xs\">Your Choice</Badge>}\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n\n                  {/* Explanation Section */}\n                  {question.explanation && (\n                    <div className=\"glass-effect p-6 rounded-xl border border-accent/30 bg-gradient-to-r from-accent/5 to-primary/5\">\n                      <div className=\"flex items-start space-x-3\">\n                        <div className=\"p-2 bg-accent/20 rounded-lg\">\n                          <AlertCircle className=\"h-5 w-5 text-accent\" />\n                        </div>\n                        <div>\n                          <h5 className=\"font-semibold text-accent mb-2\">Explanation</h5>\n                          <p className=\"text-muted-foreground leading-relaxed\">{question.explanation}</p>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))}\n\n            {/* Show More/Less Button */}\n            {correctAnswers.length > 3 && (\n              <div className=\"text-center pt-6\">\n                <Button\n                  onClick={() => setShowAllQuestions(!showAllQuestions)}\n                  variant=\"outline\"\n                  size=\"lg\"\n                  className=\"border-2 border-primary/30 hover:border-primary/50 bg-glass-effect backdrop-blur-md px-8 py-4 rounded-xl font-semibold transition-all duration-300 transform hover:scale-105\"\n                >\n                  {showAllQuestions ? (\n                    <>Show Less <Clock className=\"ml-2 h-5 w-5\" /></>\n                  ) : (\n                    <>Show All {correctAnswers.length} Questions <Clock className=\"ml-2 h-5 w-5\" /></>\n                  )}\n                </Button>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":18278},"client/src/components/quiz/quiz-selection.tsx":{"content":"\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuizState } from \"@/hooks/use-quiz-state\";\nimport { Globe, FlaskConical, Landmark, BookOpen, Calendar, Target } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface QuizSelectionProps {\n  onQuizStart: (quiz: any) => void;\n}\n\nexport default function QuizSelection({ onQuizStart }: QuizSelectionProps) {\n  const { toast } = useToast();\n  const { setCurrentQuiz, setIsQuizActive } = useQuizState();\n  const [selectedMode, setSelectedMode] = useState<\"daily\" | \"practice\" | null>(null);\n\n  const { data: dailyQuizStatus } = useQuery({\n    queryKey: [\"/api/daily-quiz-status\"],\n  });\n\n  const isDailyQuizCompleted = (field: string) => {\n    return dailyQuizStatus && dailyQuizStatus[field] === true;\n  };\n\n  const generateQuizMutation = useMutation({\n    mutationFn: async ({ field, questionCount, isDailyQuiz }: { field: string; questionCount: number; isDailyQuiz: boolean }) => {\n      const res = await apiRequest(\"POST\", \"/api/quiz/generate\", { field, questionCount, isDailyQuiz });\n      return await res.json();\n    },\n    onSuccess: (quiz) => {\n      setCurrentQuiz(quiz);\n      setIsQuizActive(true);\n      onQuizStart(quiz);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to generate quiz\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStartQuiz = (field: string, questionCount: number = 20, isDailyQuiz: boolean = false) => {\n    if (isDailyQuiz && isDailyQuizCompleted(field)) {\n      toast({\n        title: \"Daily Challenge Already Completed\",\n        description: \"You can only take the daily challenge once per day. Try again tomorrow!\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    generateQuizMutation.mutate({ field, questionCount, isDailyQuiz });\n  };\n\n  const quizFields = [\n    {\n      id: \"web-development\",\n      name: \"Web Development\",\n      description: \"HTML, CSS, JavaScript, React, Node.js\",\n      icon: Globe,\n      color: \"from-blue-500 to-cyan-500\",\n    },\n    {\n      id: \"data-science\",\n      name: \"Data Science\",\n      description: \"Python, Machine Learning, Statistics\",\n      icon: FlaskConical,\n      color: \"from-purple-500 to-pink-500\",\n    },\n    {\n      id: \"system-design\",\n      name: \"System Design\",\n      description: \"Architecture, Scalability, Databases\",\n      icon: Landmark,\n      color: \"from-green-500 to-emerald-500\",\n    },\n    {\n      id: \"algorithms\",\n      name: \"Algorithms & DS\",\n      description: \"Data Structures, Problem Solving\",\n      icon: BookOpen,\n      color: \"from-orange-500 to-red-500\",\n    },\n    {\n      id: \"android-development\",\n      name: \"Android Development\",\n      description: \"Java, Kotlin, Android SDK\",\n      icon: Target,\n      color: \"from-indigo-500 to-blue-500\",\n    },\n    {\n      id: \"ethical-hacking\",\n      name: \"Ethical Hacking\",\n      description: \"Security, Penetration Testing\",\n      icon: FlaskConical,\n      color: \"from-red-500 to-pink-500\",\n    },\n  ];\n\n  if (generateQuizMutation.isPending) {\n    return (\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"text-center py-12\">\n          <div className=\"animate-spin rounded-full h-16 w-16 border-b-2 border-primary mx-auto mb-4\"></div>\n          <h2 className=\"text-2xl font-bold mb-2\">Generating Your Quiz</h2>\n          <p className=\"text-muted-foreground\">\n            Our AI is crafting personalized questions just for you...\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-6xl mx-auto space-y-8\">\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-4xl font-bold mb-4 bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n          Challenge Your Brain\n        </h1>\n        <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n          Choose your field and test your knowledge with AI-generated questions\n        </p>\n      </div>\n\n      {/* Mode Selection */}\n      <div className=\"flex justify-center space-x-4 mb-8\">\n        <Button\n          variant={selectedMode === \"daily\" ? \"default\" : \"outline\"}\n          onClick={() => setSelectedMode(\"daily\")}\n          className=\"px-8 py-3\"\n        >\n          <Calendar className=\"w-4 h-4 mr-2\" />\n          Daily Challenge\n        </Button>\n        <Button\n          variant={selectedMode === \"practice\" ? \"default\" : \"outline\"}\n          onClick={() => setSelectedMode(\"practice\")}\n          className=\"px-8 py-3\"\n        >\n          <Target className=\"w-4 h-4 mr-2\" />\n          Practice Mode\n        </Button>\n      </div>\n\n      {selectedMode && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {quizFields.map((field) => (\n            <Card key={field.id} className=\"group hover:shadow-lg transition-all duration-300 cursor-pointer overflow-hidden\">\n              <div className={`h-2 bg-gradient-to-r ${field.color}`} />\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`p-3 rounded-lg bg-gradient-to-r ${field.color} bg-opacity-10`}>\n                    <field.icon className=\"h-6 w-6 text-foreground\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-lg\">{field.name}</CardTitle>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <p className=\"text-muted-foreground text-sm mb-4\">\n                  {field.description}\n                </p>\n                <Button \n                  onClick={() => handleStartQuiz(field.id, 20, selectedMode === \"daily\")}\n                  className=\"w-full group-hover:scale-105 transition-transform\"\n                  disabled={selectedMode === \"daily\" && dailyQuizStatus?.[field.id]?.completed}\n                >\n                  {selectedMode === \"daily\" && dailyQuizStatus?.[field.id]?.completed \n                    ? \"Completed Today\" \n                    : `Start ${selectedMode === \"daily\" ? \"Daily\" : \"Practice\"} Quiz`\n                  }\n                </Button>\n                {selectedMode === \"daily\" && (\n                  <p className=\"text-xs text-muted-foreground mt-2 text-center\">\n                    20 questions • Counts toward leaderboard\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {!selectedMode && (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">\n            Select a mode above to see available quiz fields\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6974},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}